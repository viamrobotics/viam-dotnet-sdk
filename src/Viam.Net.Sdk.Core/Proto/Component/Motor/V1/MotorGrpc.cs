// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: component/motor/v1/motor.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Viam.Component.Motor.V1 {
  /// <summary>
  /// A MotorService maintains all motors associated with a robot
  /// </summary>
  public static partial class MotorService
  {
    static readonly string __ServiceName = "viam.component.motor.v1.MotorService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.SetPowerRequest> __Marshaller_viam_component_motor_v1_SetPowerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.SetPowerRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.SetPowerResponse> __Marshaller_viam_component_motor_v1_SetPowerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.SetPowerResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.GoForRequest> __Marshaller_viam_component_motor_v1_GoForRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.GoForRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.GoForResponse> __Marshaller_viam_component_motor_v1_GoForResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.GoForResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.GoToRequest> __Marshaller_viam_component_motor_v1_GoToRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.GoToRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.GoToResponse> __Marshaller_viam_component_motor_v1_GoToResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.GoToResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.ResetZeroPositionRequest> __Marshaller_viam_component_motor_v1_ResetZeroPositionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.ResetZeroPositionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.ResetZeroPositionResponse> __Marshaller_viam_component_motor_v1_ResetZeroPositionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.ResetZeroPositionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.GetPositionRequest> __Marshaller_viam_component_motor_v1_GetPositionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.GetPositionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.GetPositionResponse> __Marshaller_viam_component_motor_v1_GetPositionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.GetPositionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.GetPropertiesRequest> __Marshaller_viam_component_motor_v1_GetPropertiesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.GetPropertiesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.GetPropertiesResponse> __Marshaller_viam_component_motor_v1_GetPropertiesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.GetPropertiesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.StopRequest> __Marshaller_viam_component_motor_v1_StopRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.StopRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.StopResponse> __Marshaller_viam_component_motor_v1_StopResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.StopResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.IsPoweredRequest> __Marshaller_viam_component_motor_v1_IsPoweredRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.IsPoweredRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.IsPoweredResponse> __Marshaller_viam_component_motor_v1_IsPoweredResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.IsPoweredResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.IsMovingRequest> __Marshaller_viam_component_motor_v1_IsMovingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.IsMovingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Motor.V1.IsMovingResponse> __Marshaller_viam_component_motor_v1_IsMovingResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Motor.V1.IsMovingResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.DoCommandRequest> __Marshaller_viam_common_v1_DoCommandRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.DoCommandRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.DoCommandResponse> __Marshaller_viam_common_v1_DoCommandResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.DoCommandResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.GetGeometriesRequest> __Marshaller_viam_common_v1_GetGeometriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.GetGeometriesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.GetGeometriesResponse> __Marshaller_viam_common_v1_GetGeometriesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.GetGeometriesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Motor.V1.SetPowerRequest, global::Viam.Component.Motor.V1.SetPowerResponse> __Method_SetPower = new grpc::Method<global::Viam.Component.Motor.V1.SetPowerRequest, global::Viam.Component.Motor.V1.SetPowerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPower",
        __Marshaller_viam_component_motor_v1_SetPowerRequest,
        __Marshaller_viam_component_motor_v1_SetPowerResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Motor.V1.GoForRequest, global::Viam.Component.Motor.V1.GoForResponse> __Method_GoFor = new grpc::Method<global::Viam.Component.Motor.V1.GoForRequest, global::Viam.Component.Motor.V1.GoForResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GoFor",
        __Marshaller_viam_component_motor_v1_GoForRequest,
        __Marshaller_viam_component_motor_v1_GoForResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Motor.V1.GoToRequest, global::Viam.Component.Motor.V1.GoToResponse> __Method_GoTo = new grpc::Method<global::Viam.Component.Motor.V1.GoToRequest, global::Viam.Component.Motor.V1.GoToResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GoTo",
        __Marshaller_viam_component_motor_v1_GoToRequest,
        __Marshaller_viam_component_motor_v1_GoToResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Motor.V1.ResetZeroPositionRequest, global::Viam.Component.Motor.V1.ResetZeroPositionResponse> __Method_ResetZeroPosition = new grpc::Method<global::Viam.Component.Motor.V1.ResetZeroPositionRequest, global::Viam.Component.Motor.V1.ResetZeroPositionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResetZeroPosition",
        __Marshaller_viam_component_motor_v1_ResetZeroPositionRequest,
        __Marshaller_viam_component_motor_v1_ResetZeroPositionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Motor.V1.GetPositionRequest, global::Viam.Component.Motor.V1.GetPositionResponse> __Method_GetPosition = new grpc::Method<global::Viam.Component.Motor.V1.GetPositionRequest, global::Viam.Component.Motor.V1.GetPositionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPosition",
        __Marshaller_viam_component_motor_v1_GetPositionRequest,
        __Marshaller_viam_component_motor_v1_GetPositionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Motor.V1.GetPropertiesRequest, global::Viam.Component.Motor.V1.GetPropertiesResponse> __Method_GetProperties = new grpc::Method<global::Viam.Component.Motor.V1.GetPropertiesRequest, global::Viam.Component.Motor.V1.GetPropertiesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProperties",
        __Marshaller_viam_component_motor_v1_GetPropertiesRequest,
        __Marshaller_viam_component_motor_v1_GetPropertiesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Motor.V1.StopRequest, global::Viam.Component.Motor.V1.StopResponse> __Method_Stop = new grpc::Method<global::Viam.Component.Motor.V1.StopRequest, global::Viam.Component.Motor.V1.StopResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Stop",
        __Marshaller_viam_component_motor_v1_StopRequest,
        __Marshaller_viam_component_motor_v1_StopResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Motor.V1.IsPoweredRequest, global::Viam.Component.Motor.V1.IsPoweredResponse> __Method_IsPowered = new grpc::Method<global::Viam.Component.Motor.V1.IsPoweredRequest, global::Viam.Component.Motor.V1.IsPoweredResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsPowered",
        __Marshaller_viam_component_motor_v1_IsPoweredRequest,
        __Marshaller_viam_component_motor_v1_IsPoweredResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Motor.V1.IsMovingRequest, global::Viam.Component.Motor.V1.IsMovingResponse> __Method_IsMoving = new grpc::Method<global::Viam.Component.Motor.V1.IsMovingRequest, global::Viam.Component.Motor.V1.IsMovingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsMoving",
        __Marshaller_viam_component_motor_v1_IsMovingRequest,
        __Marshaller_viam_component_motor_v1_IsMovingResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Common.V1.DoCommandRequest, global::Viam.Common.V1.DoCommandResponse> __Method_DoCommand = new grpc::Method<global::Viam.Common.V1.DoCommandRequest, global::Viam.Common.V1.DoCommandResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DoCommand",
        __Marshaller_viam_common_v1_DoCommandRequest,
        __Marshaller_viam_common_v1_DoCommandResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Common.V1.GetGeometriesRequest, global::Viam.Common.V1.GetGeometriesResponse> __Method_GetGeometries = new grpc::Method<global::Viam.Common.V1.GetGeometriesRequest, global::Viam.Common.V1.GetGeometriesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGeometries",
        __Marshaller_viam_common_v1_GetGeometriesRequest,
        __Marshaller_viam_common_v1_GetGeometriesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Viam.Component.Motor.V1.MotorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MotorService</summary>
    [grpc::BindServiceMethod(typeof(MotorService), "BindService")]
    public abstract partial class MotorServiceBase
    {
      /// <summary>
      /// SetPower sets the percentage of the motor's total power that should be employed
      /// expressed a value between -1 and 1 where negative values indicate a backwards
      /// direction and positive values a forward direction
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Motor.V1.SetPowerResponse> SetPower(global::Viam.Component.Motor.V1.SetPowerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
      /// for a specified number of rotations relative to its starting position
      /// This method will return an error if position reporting is not supported
      /// If revolutions is 0, this will run the motor at rpm indefinitely
      /// If revolutions != 0, this will block until the number of revolutions has been completed or another operation comes in.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Motor.V1.GoForResponse> GoFor(global::Viam.Component.Motor.V1.GoForRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GoTo requests the robot's motor to move to a specific position that
      /// is relative to its home position at a specified speed which is expressed in RPM
      /// This method will return an error if position reporting is not supported
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Motor.V1.GoToResponse> GoTo(global::Viam.Component.Motor.V1.GoToRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ResetZeroPosition sets the current position of the motor as the new zero position
      /// This method will return an error if position reporting is not supported
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Motor.V1.ResetZeroPositionResponse> ResetZeroPosition(global::Viam.Component.Motor.V1.ResetZeroPositionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Position reports the position of the robot's motor relative to its zero position
      /// This method will return an error if position reporting is not supported
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Motor.V1.GetPositionResponse> GetPosition(global::Viam.Component.Motor.V1.GetPositionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetProperties returns a message of booleans indicating which optional features the robot's motor supports
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Motor.V1.GetPropertiesResponse> GetProperties(global::Viam.Component.Motor.V1.GetPropertiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stop turns the robot's motor off
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Motor.V1.StopResponse> Stop(global::Viam.Component.Motor.V1.StopRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// IsPowered returns true if the robot's motor is on
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Motor.V1.IsPoweredResponse> IsPowered(global::Viam.Component.Motor.V1.IsPoweredRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// IsMoving reports if a component is in motion
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Motor.V1.IsMovingResponse> IsMoving(global::Viam.Component.Motor.V1.IsMovingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Common.V1.DoCommandResponse> DoCommand(global::Viam.Common.V1.DoCommandRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetGeometries returns the geometries of the component in their current configuration
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Common.V1.GetGeometriesResponse> GetGeometries(global::Viam.Common.V1.GetGeometriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MotorService</summary>
    public partial class MotorServiceClient : grpc::ClientBase<MotorServiceClient>
    {
      /// <summary>Creates a new client for MotorService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MotorServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MotorService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MotorServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MotorServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MotorServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// SetPower sets the percentage of the motor's total power that should be employed
      /// expressed a value between -1 and 1 where negative values indicate a backwards
      /// direction and positive values a forward direction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.SetPowerResponse SetPower(global::Viam.Component.Motor.V1.SetPowerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPower(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetPower sets the percentage of the motor's total power that should be employed
      /// expressed a value between -1 and 1 where negative values indicate a backwards
      /// direction and positive values a forward direction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.SetPowerResponse SetPower(global::Viam.Component.Motor.V1.SetPowerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPower, null, options, request);
      }
      /// <summary>
      /// SetPower sets the percentage of the motor's total power that should be employed
      /// expressed a value between -1 and 1 where negative values indicate a backwards
      /// direction and positive values a forward direction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.SetPowerResponse> SetPowerAsync(global::Viam.Component.Motor.V1.SetPowerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPowerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetPower sets the percentage of the motor's total power that should be employed
      /// expressed a value between -1 and 1 where negative values indicate a backwards
      /// direction and positive values a forward direction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.SetPowerResponse> SetPowerAsync(global::Viam.Component.Motor.V1.SetPowerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPower, null, options, request);
      }
      /// <summary>
      /// GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
      /// for a specified number of rotations relative to its starting position
      /// This method will return an error if position reporting is not supported
      /// If revolutions is 0, this will run the motor at rpm indefinitely
      /// If revolutions != 0, this will block until the number of revolutions has been completed or another operation comes in.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.GoForResponse GoFor(global::Viam.Component.Motor.V1.GoForRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GoFor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
      /// for a specified number of rotations relative to its starting position
      /// This method will return an error if position reporting is not supported
      /// If revolutions is 0, this will run the motor at rpm indefinitely
      /// If revolutions != 0, this will block until the number of revolutions has been completed or another operation comes in.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.GoForResponse GoFor(global::Viam.Component.Motor.V1.GoForRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GoFor, null, options, request);
      }
      /// <summary>
      /// GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
      /// for a specified number of rotations relative to its starting position
      /// This method will return an error if position reporting is not supported
      /// If revolutions is 0, this will run the motor at rpm indefinitely
      /// If revolutions != 0, this will block until the number of revolutions has been completed or another operation comes in.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.GoForResponse> GoForAsync(global::Viam.Component.Motor.V1.GoForRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GoForAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
      /// for a specified number of rotations relative to its starting position
      /// This method will return an error if position reporting is not supported
      /// If revolutions is 0, this will run the motor at rpm indefinitely
      /// If revolutions != 0, this will block until the number of revolutions has been completed or another operation comes in.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.GoForResponse> GoForAsync(global::Viam.Component.Motor.V1.GoForRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GoFor, null, options, request);
      }
      /// <summary>
      /// GoTo requests the robot's motor to move to a specific position that
      /// is relative to its home position at a specified speed which is expressed in RPM
      /// This method will return an error if position reporting is not supported
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.GoToResponse GoTo(global::Viam.Component.Motor.V1.GoToRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GoTo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GoTo requests the robot's motor to move to a specific position that
      /// is relative to its home position at a specified speed which is expressed in RPM
      /// This method will return an error if position reporting is not supported
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.GoToResponse GoTo(global::Viam.Component.Motor.V1.GoToRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GoTo, null, options, request);
      }
      /// <summary>
      /// GoTo requests the robot's motor to move to a specific position that
      /// is relative to its home position at a specified speed which is expressed in RPM
      /// This method will return an error if position reporting is not supported
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.GoToResponse> GoToAsync(global::Viam.Component.Motor.V1.GoToRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GoToAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GoTo requests the robot's motor to move to a specific position that
      /// is relative to its home position at a specified speed which is expressed in RPM
      /// This method will return an error if position reporting is not supported
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.GoToResponse> GoToAsync(global::Viam.Component.Motor.V1.GoToRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GoTo, null, options, request);
      }
      /// <summary>
      /// ResetZeroPosition sets the current position of the motor as the new zero position
      /// This method will return an error if position reporting is not supported
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.ResetZeroPositionResponse ResetZeroPosition(global::Viam.Component.Motor.V1.ResetZeroPositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetZeroPosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ResetZeroPosition sets the current position of the motor as the new zero position
      /// This method will return an error if position reporting is not supported
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.ResetZeroPositionResponse ResetZeroPosition(global::Viam.Component.Motor.V1.ResetZeroPositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetZeroPosition, null, options, request);
      }
      /// <summary>
      /// ResetZeroPosition sets the current position of the motor as the new zero position
      /// This method will return an error if position reporting is not supported
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.ResetZeroPositionResponse> ResetZeroPositionAsync(global::Viam.Component.Motor.V1.ResetZeroPositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetZeroPositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ResetZeroPosition sets the current position of the motor as the new zero position
      /// This method will return an error if position reporting is not supported
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.ResetZeroPositionResponse> ResetZeroPositionAsync(global::Viam.Component.Motor.V1.ResetZeroPositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetZeroPosition, null, options, request);
      }
      /// <summary>
      /// Position reports the position of the robot's motor relative to its zero position
      /// This method will return an error if position reporting is not supported
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.GetPositionResponse GetPosition(global::Viam.Component.Motor.V1.GetPositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Position reports the position of the robot's motor relative to its zero position
      /// This method will return an error if position reporting is not supported
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.GetPositionResponse GetPosition(global::Viam.Component.Motor.V1.GetPositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPosition, null, options, request);
      }
      /// <summary>
      /// Position reports the position of the robot's motor relative to its zero position
      /// This method will return an error if position reporting is not supported
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.GetPositionResponse> GetPositionAsync(global::Viam.Component.Motor.V1.GetPositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Position reports the position of the robot's motor relative to its zero position
      /// This method will return an error if position reporting is not supported
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.GetPositionResponse> GetPositionAsync(global::Viam.Component.Motor.V1.GetPositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPosition, null, options, request);
      }
      /// <summary>
      /// GetProperties returns a message of booleans indicating which optional features the robot's motor supports
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.GetPropertiesResponse GetProperties(global::Viam.Component.Motor.V1.GetPropertiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProperties(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetProperties returns a message of booleans indicating which optional features the robot's motor supports
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.GetPropertiesResponse GetProperties(global::Viam.Component.Motor.V1.GetPropertiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProperties, null, options, request);
      }
      /// <summary>
      /// GetProperties returns a message of booleans indicating which optional features the robot's motor supports
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.GetPropertiesResponse> GetPropertiesAsync(global::Viam.Component.Motor.V1.GetPropertiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPropertiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetProperties returns a message of booleans indicating which optional features the robot's motor supports
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.GetPropertiesResponse> GetPropertiesAsync(global::Viam.Component.Motor.V1.GetPropertiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProperties, null, options, request);
      }
      /// <summary>
      /// Stop turns the robot's motor off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.StopResponse Stop(global::Viam.Component.Motor.V1.StopRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Stop(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stop turns the robot's motor off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.StopResponse Stop(global::Viam.Component.Motor.V1.StopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Stop, null, options, request);
      }
      /// <summary>
      /// Stop turns the robot's motor off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.StopResponse> StopAsync(global::Viam.Component.Motor.V1.StopRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stop turns the robot's motor off
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.StopResponse> StopAsync(global::Viam.Component.Motor.V1.StopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Stop, null, options, request);
      }
      /// <summary>
      /// IsPowered returns true if the robot's motor is on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.IsPoweredResponse IsPowered(global::Viam.Component.Motor.V1.IsPoweredRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsPowered(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IsPowered returns true if the robot's motor is on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.IsPoweredResponse IsPowered(global::Viam.Component.Motor.V1.IsPoweredRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsPowered, null, options, request);
      }
      /// <summary>
      /// IsPowered returns true if the robot's motor is on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.IsPoweredResponse> IsPoweredAsync(global::Viam.Component.Motor.V1.IsPoweredRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsPoweredAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IsPowered returns true if the robot's motor is on
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.IsPoweredResponse> IsPoweredAsync(global::Viam.Component.Motor.V1.IsPoweredRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsPowered, null, options, request);
      }
      /// <summary>
      /// IsMoving reports if a component is in motion
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.IsMovingResponse IsMoving(global::Viam.Component.Motor.V1.IsMovingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsMoving(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IsMoving reports if a component is in motion
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Motor.V1.IsMovingResponse IsMoving(global::Viam.Component.Motor.V1.IsMovingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsMoving, null, options, request);
      }
      /// <summary>
      /// IsMoving reports if a component is in motion
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.IsMovingResponse> IsMovingAsync(global::Viam.Component.Motor.V1.IsMovingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsMovingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IsMoving reports if a component is in motion
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Motor.V1.IsMovingResponse> IsMovingAsync(global::Viam.Component.Motor.V1.IsMovingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsMoving, null, options, request);
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.DoCommandResponse DoCommand(global::Viam.Common.V1.DoCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DoCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.DoCommandResponse DoCommand(global::Viam.Common.V1.DoCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DoCommand, null, options, request);
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.DoCommandResponse> DoCommandAsync(global::Viam.Common.V1.DoCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DoCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.DoCommandResponse> DoCommandAsync(global::Viam.Common.V1.DoCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DoCommand, null, options, request);
      }
      /// <summary>
      /// GetGeometries returns the geometries of the component in their current configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.GetGeometriesResponse GetGeometries(global::Viam.Common.V1.GetGeometriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGeometries(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGeometries returns the geometries of the component in their current configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.GetGeometriesResponse GetGeometries(global::Viam.Common.V1.GetGeometriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGeometries, null, options, request);
      }
      /// <summary>
      /// GetGeometries returns the geometries of the component in their current configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.GetGeometriesResponse> GetGeometriesAsync(global::Viam.Common.V1.GetGeometriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGeometriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGeometries returns the geometries of the component in their current configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.GetGeometriesResponse> GetGeometriesAsync(global::Viam.Common.V1.GetGeometriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGeometries, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override MotorServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MotorServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(MotorServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SetPower, serviceImpl.SetPower)
          .AddMethod(__Method_GoFor, serviceImpl.GoFor)
          .AddMethod(__Method_GoTo, serviceImpl.GoTo)
          .AddMethod(__Method_ResetZeroPosition, serviceImpl.ResetZeroPosition)
          .AddMethod(__Method_GetPosition, serviceImpl.GetPosition)
          .AddMethod(__Method_GetProperties, serviceImpl.GetProperties)
          .AddMethod(__Method_Stop, serviceImpl.Stop)
          .AddMethod(__Method_IsPowered, serviceImpl.IsPowered)
          .AddMethod(__Method_IsMoving, serviceImpl.IsMoving)
          .AddMethod(__Method_DoCommand, serviceImpl.DoCommand)
          .AddMethod(__Method_GetGeometries, serviceImpl.GetGeometries).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MotorServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SetPower, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Motor.V1.SetPowerRequest, global::Viam.Component.Motor.V1.SetPowerResponse>(serviceImpl.SetPower));
      serviceBinder.AddMethod(__Method_GoFor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Motor.V1.GoForRequest, global::Viam.Component.Motor.V1.GoForResponse>(serviceImpl.GoFor));
      serviceBinder.AddMethod(__Method_GoTo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Motor.V1.GoToRequest, global::Viam.Component.Motor.V1.GoToResponse>(serviceImpl.GoTo));
      serviceBinder.AddMethod(__Method_ResetZeroPosition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Motor.V1.ResetZeroPositionRequest, global::Viam.Component.Motor.V1.ResetZeroPositionResponse>(serviceImpl.ResetZeroPosition));
      serviceBinder.AddMethod(__Method_GetPosition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Motor.V1.GetPositionRequest, global::Viam.Component.Motor.V1.GetPositionResponse>(serviceImpl.GetPosition));
      serviceBinder.AddMethod(__Method_GetProperties, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Motor.V1.GetPropertiesRequest, global::Viam.Component.Motor.V1.GetPropertiesResponse>(serviceImpl.GetProperties));
      serviceBinder.AddMethod(__Method_Stop, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Motor.V1.StopRequest, global::Viam.Component.Motor.V1.StopResponse>(serviceImpl.Stop));
      serviceBinder.AddMethod(__Method_IsPowered, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Motor.V1.IsPoweredRequest, global::Viam.Component.Motor.V1.IsPoweredResponse>(serviceImpl.IsPowered));
      serviceBinder.AddMethod(__Method_IsMoving, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Motor.V1.IsMovingRequest, global::Viam.Component.Motor.V1.IsMovingResponse>(serviceImpl.IsMoving));
      serviceBinder.AddMethod(__Method_DoCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Common.V1.DoCommandRequest, global::Viam.Common.V1.DoCommandResponse>(serviceImpl.DoCommand));
      serviceBinder.AddMethod(__Method_GetGeometries, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Common.V1.GetGeometriesRequest, global::Viam.Common.V1.GetGeometriesResponse>(serviceImpl.GetGeometries));
    }

  }
}
#endregion
