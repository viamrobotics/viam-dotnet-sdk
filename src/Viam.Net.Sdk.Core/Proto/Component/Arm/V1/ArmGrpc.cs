// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: component/arm/v1/arm.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Viam.Component.Arm.V1 {
  /// <summary>
  /// An ArmService services all arms associated with a robot
  /// </summary>
  public static partial class ArmService
  {
    static readonly string __ServiceName = "viam.component.arm.v1.ArmService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Arm.V1.GetEndPositionRequest> __Marshaller_viam_component_arm_v1_GetEndPositionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Arm.V1.GetEndPositionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Arm.V1.GetEndPositionResponse> __Marshaller_viam_component_arm_v1_GetEndPositionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Arm.V1.GetEndPositionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Arm.V1.MoveToPositionRequest> __Marshaller_viam_component_arm_v1_MoveToPositionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Arm.V1.MoveToPositionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Arm.V1.MoveToPositionResponse> __Marshaller_viam_component_arm_v1_MoveToPositionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Arm.V1.MoveToPositionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Arm.V1.GetJointPositionsRequest> __Marshaller_viam_component_arm_v1_GetJointPositionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Arm.V1.GetJointPositionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Arm.V1.GetJointPositionsResponse> __Marshaller_viam_component_arm_v1_GetJointPositionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Arm.V1.GetJointPositionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Arm.V1.MoveToJointPositionsRequest> __Marshaller_viam_component_arm_v1_MoveToJointPositionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Arm.V1.MoveToJointPositionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Arm.V1.MoveToJointPositionsResponse> __Marshaller_viam_component_arm_v1_MoveToJointPositionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Arm.V1.MoveToJointPositionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Arm.V1.StopRequest> __Marshaller_viam_component_arm_v1_StopRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Arm.V1.StopRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Arm.V1.StopResponse> __Marshaller_viam_component_arm_v1_StopResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Arm.V1.StopResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Arm.V1.IsMovingRequest> __Marshaller_viam_component_arm_v1_IsMovingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Arm.V1.IsMovingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Arm.V1.IsMovingResponse> __Marshaller_viam_component_arm_v1_IsMovingResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Arm.V1.IsMovingResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.DoCommandRequest> __Marshaller_viam_common_v1_DoCommandRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.DoCommandRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.DoCommandResponse> __Marshaller_viam_common_v1_DoCommandResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.DoCommandResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.GetKinematicsRequest> __Marshaller_viam_common_v1_GetKinematicsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.GetKinematicsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.GetKinematicsResponse> __Marshaller_viam_common_v1_GetKinematicsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.GetKinematicsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.GetGeometriesRequest> __Marshaller_viam_common_v1_GetGeometriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.GetGeometriesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.GetGeometriesResponse> __Marshaller_viam_common_v1_GetGeometriesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.GetGeometriesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Arm.V1.GetEndPositionRequest, global::Viam.Component.Arm.V1.GetEndPositionResponse> __Method_GetEndPosition = new grpc::Method<global::Viam.Component.Arm.V1.GetEndPositionRequest, global::Viam.Component.Arm.V1.GetEndPositionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEndPosition",
        __Marshaller_viam_component_arm_v1_GetEndPositionRequest,
        __Marshaller_viam_component_arm_v1_GetEndPositionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Arm.V1.MoveToPositionRequest, global::Viam.Component.Arm.V1.MoveToPositionResponse> __Method_MoveToPosition = new grpc::Method<global::Viam.Component.Arm.V1.MoveToPositionRequest, global::Viam.Component.Arm.V1.MoveToPositionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveToPosition",
        __Marshaller_viam_component_arm_v1_MoveToPositionRequest,
        __Marshaller_viam_component_arm_v1_MoveToPositionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Arm.V1.GetJointPositionsRequest, global::Viam.Component.Arm.V1.GetJointPositionsResponse> __Method_GetJointPositions = new grpc::Method<global::Viam.Component.Arm.V1.GetJointPositionsRequest, global::Viam.Component.Arm.V1.GetJointPositionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetJointPositions",
        __Marshaller_viam_component_arm_v1_GetJointPositionsRequest,
        __Marshaller_viam_component_arm_v1_GetJointPositionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Arm.V1.MoveToJointPositionsRequest, global::Viam.Component.Arm.V1.MoveToJointPositionsResponse> __Method_MoveToJointPositions = new grpc::Method<global::Viam.Component.Arm.V1.MoveToJointPositionsRequest, global::Viam.Component.Arm.V1.MoveToJointPositionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveToJointPositions",
        __Marshaller_viam_component_arm_v1_MoveToJointPositionsRequest,
        __Marshaller_viam_component_arm_v1_MoveToJointPositionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Arm.V1.StopRequest, global::Viam.Component.Arm.V1.StopResponse> __Method_Stop = new grpc::Method<global::Viam.Component.Arm.V1.StopRequest, global::Viam.Component.Arm.V1.StopResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Stop",
        __Marshaller_viam_component_arm_v1_StopRequest,
        __Marshaller_viam_component_arm_v1_StopResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Arm.V1.IsMovingRequest, global::Viam.Component.Arm.V1.IsMovingResponse> __Method_IsMoving = new grpc::Method<global::Viam.Component.Arm.V1.IsMovingRequest, global::Viam.Component.Arm.V1.IsMovingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsMoving",
        __Marshaller_viam_component_arm_v1_IsMovingRequest,
        __Marshaller_viam_component_arm_v1_IsMovingResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Common.V1.DoCommandRequest, global::Viam.Common.V1.DoCommandResponse> __Method_DoCommand = new grpc::Method<global::Viam.Common.V1.DoCommandRequest, global::Viam.Common.V1.DoCommandResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DoCommand",
        __Marshaller_viam_common_v1_DoCommandRequest,
        __Marshaller_viam_common_v1_DoCommandResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Common.V1.GetKinematicsRequest, global::Viam.Common.V1.GetKinematicsResponse> __Method_GetKinematics = new grpc::Method<global::Viam.Common.V1.GetKinematicsRequest, global::Viam.Common.V1.GetKinematicsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetKinematics",
        __Marshaller_viam_common_v1_GetKinematicsRequest,
        __Marshaller_viam_common_v1_GetKinematicsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Common.V1.GetGeometriesRequest, global::Viam.Common.V1.GetGeometriesResponse> __Method_GetGeometries = new grpc::Method<global::Viam.Common.V1.GetGeometriesRequest, global::Viam.Common.V1.GetGeometriesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGeometries",
        __Marshaller_viam_common_v1_GetGeometriesRequest,
        __Marshaller_viam_common_v1_GetGeometriesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Viam.Component.Arm.V1.ArmReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ArmService</summary>
    [grpc::BindServiceMethod(typeof(ArmService), "BindService")]
    public abstract partial class ArmServiceBase
    {
      /// <summary>
      /// GetEndPosition gets the current position the end of the robot's arm expressed as X,Y,Z,ox,oy,oz,theta
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Arm.V1.GetEndPositionResponse> GetEndPosition(global::Viam.Component.Arm.V1.GetEndPositionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// MoveToPosition moves the mount point of the robot's end effector to the requested position.
      /// This will block until done or a new operation cancels this one
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Arm.V1.MoveToPositionResponse> MoveToPosition(global::Viam.Component.Arm.V1.MoveToPositionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetJointPositions lists the joint positions (in degrees) of every joint on a robot
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Arm.V1.GetJointPositionsResponse> GetJointPositions(global::Viam.Component.Arm.V1.GetJointPositionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// MoveToJointPositions moves every joint on a robot's arm to specified angles which are expressed in degrees
      /// This will block until done or a new operation cancels this one
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Arm.V1.MoveToJointPositionsResponse> MoveToJointPositions(global::Viam.Component.Arm.V1.MoveToJointPositionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stop stops a robot's arm
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Arm.V1.StopResponse> Stop(global::Viam.Component.Arm.V1.StopRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// IsMoving reports if a component is in motion
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Arm.V1.IsMovingResponse> IsMoving(global::Viam.Component.Arm.V1.IsMovingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Common.V1.DoCommandResponse> DoCommand(global::Viam.Common.V1.DoCommandRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetKinematics returns the kinematics file for the component
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Common.V1.GetKinematicsResponse> GetKinematics(global::Viam.Common.V1.GetKinematicsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetGeometries returns the geometries of the component in their current configuration
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Common.V1.GetGeometriesResponse> GetGeometries(global::Viam.Common.V1.GetGeometriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ArmService</summary>
    public partial class ArmServiceClient : grpc::ClientBase<ArmServiceClient>
    {
      /// <summary>Creates a new client for ArmService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ArmServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ArmService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ArmServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ArmServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ArmServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// GetEndPosition gets the current position the end of the robot's arm expressed as X,Y,Z,ox,oy,oz,theta
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Arm.V1.GetEndPositionResponse GetEndPosition(global::Viam.Component.Arm.V1.GetEndPositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEndPosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetEndPosition gets the current position the end of the robot's arm expressed as X,Y,Z,ox,oy,oz,theta
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Arm.V1.GetEndPositionResponse GetEndPosition(global::Viam.Component.Arm.V1.GetEndPositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEndPosition, null, options, request);
      }
      /// <summary>
      /// GetEndPosition gets the current position the end of the robot's arm expressed as X,Y,Z,ox,oy,oz,theta
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Arm.V1.GetEndPositionResponse> GetEndPositionAsync(global::Viam.Component.Arm.V1.GetEndPositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEndPositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetEndPosition gets the current position the end of the robot's arm expressed as X,Y,Z,ox,oy,oz,theta
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Arm.V1.GetEndPositionResponse> GetEndPositionAsync(global::Viam.Component.Arm.V1.GetEndPositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEndPosition, null, options, request);
      }
      /// <summary>
      /// MoveToPosition moves the mount point of the robot's end effector to the requested position.
      /// This will block until done or a new operation cancels this one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Arm.V1.MoveToPositionResponse MoveToPosition(global::Viam.Component.Arm.V1.MoveToPositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveToPosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MoveToPosition moves the mount point of the robot's end effector to the requested position.
      /// This will block until done or a new operation cancels this one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Arm.V1.MoveToPositionResponse MoveToPosition(global::Viam.Component.Arm.V1.MoveToPositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveToPosition, null, options, request);
      }
      /// <summary>
      /// MoveToPosition moves the mount point of the robot's end effector to the requested position.
      /// This will block until done or a new operation cancels this one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Arm.V1.MoveToPositionResponse> MoveToPositionAsync(global::Viam.Component.Arm.V1.MoveToPositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveToPositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MoveToPosition moves the mount point of the robot's end effector to the requested position.
      /// This will block until done or a new operation cancels this one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Arm.V1.MoveToPositionResponse> MoveToPositionAsync(global::Viam.Component.Arm.V1.MoveToPositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveToPosition, null, options, request);
      }
      /// <summary>
      /// GetJointPositions lists the joint positions (in degrees) of every joint on a robot
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Arm.V1.GetJointPositionsResponse GetJointPositions(global::Viam.Component.Arm.V1.GetJointPositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetJointPositions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetJointPositions lists the joint positions (in degrees) of every joint on a robot
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Arm.V1.GetJointPositionsResponse GetJointPositions(global::Viam.Component.Arm.V1.GetJointPositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetJointPositions, null, options, request);
      }
      /// <summary>
      /// GetJointPositions lists the joint positions (in degrees) of every joint on a robot
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Arm.V1.GetJointPositionsResponse> GetJointPositionsAsync(global::Viam.Component.Arm.V1.GetJointPositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetJointPositionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetJointPositions lists the joint positions (in degrees) of every joint on a robot
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Arm.V1.GetJointPositionsResponse> GetJointPositionsAsync(global::Viam.Component.Arm.V1.GetJointPositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetJointPositions, null, options, request);
      }
      /// <summary>
      /// MoveToJointPositions moves every joint on a robot's arm to specified angles which are expressed in degrees
      /// This will block until done or a new operation cancels this one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Arm.V1.MoveToJointPositionsResponse MoveToJointPositions(global::Viam.Component.Arm.V1.MoveToJointPositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveToJointPositions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MoveToJointPositions moves every joint on a robot's arm to specified angles which are expressed in degrees
      /// This will block until done or a new operation cancels this one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Arm.V1.MoveToJointPositionsResponse MoveToJointPositions(global::Viam.Component.Arm.V1.MoveToJointPositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveToJointPositions, null, options, request);
      }
      /// <summary>
      /// MoveToJointPositions moves every joint on a robot's arm to specified angles which are expressed in degrees
      /// This will block until done or a new operation cancels this one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Arm.V1.MoveToJointPositionsResponse> MoveToJointPositionsAsync(global::Viam.Component.Arm.V1.MoveToJointPositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveToJointPositionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MoveToJointPositions moves every joint on a robot's arm to specified angles which are expressed in degrees
      /// This will block until done or a new operation cancels this one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Arm.V1.MoveToJointPositionsResponse> MoveToJointPositionsAsync(global::Viam.Component.Arm.V1.MoveToJointPositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveToJointPositions, null, options, request);
      }
      /// <summary>
      /// Stop stops a robot's arm
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Arm.V1.StopResponse Stop(global::Viam.Component.Arm.V1.StopRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Stop(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stop stops a robot's arm
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Arm.V1.StopResponse Stop(global::Viam.Component.Arm.V1.StopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Stop, null, options, request);
      }
      /// <summary>
      /// Stop stops a robot's arm
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Arm.V1.StopResponse> StopAsync(global::Viam.Component.Arm.V1.StopRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stop stops a robot's arm
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Arm.V1.StopResponse> StopAsync(global::Viam.Component.Arm.V1.StopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Stop, null, options, request);
      }
      /// <summary>
      /// IsMoving reports if a component is in motion
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Arm.V1.IsMovingResponse IsMoving(global::Viam.Component.Arm.V1.IsMovingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsMoving(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IsMoving reports if a component is in motion
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Arm.V1.IsMovingResponse IsMoving(global::Viam.Component.Arm.V1.IsMovingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsMoving, null, options, request);
      }
      /// <summary>
      /// IsMoving reports if a component is in motion
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Arm.V1.IsMovingResponse> IsMovingAsync(global::Viam.Component.Arm.V1.IsMovingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsMovingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IsMoving reports if a component is in motion
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Arm.V1.IsMovingResponse> IsMovingAsync(global::Viam.Component.Arm.V1.IsMovingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsMoving, null, options, request);
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.DoCommandResponse DoCommand(global::Viam.Common.V1.DoCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DoCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.DoCommandResponse DoCommand(global::Viam.Common.V1.DoCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DoCommand, null, options, request);
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.DoCommandResponse> DoCommandAsync(global::Viam.Common.V1.DoCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DoCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.DoCommandResponse> DoCommandAsync(global::Viam.Common.V1.DoCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DoCommand, null, options, request);
      }
      /// <summary>
      /// GetKinematics returns the kinematics file for the component
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.GetKinematicsResponse GetKinematics(global::Viam.Common.V1.GetKinematicsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKinematics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetKinematics returns the kinematics file for the component
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.GetKinematicsResponse GetKinematics(global::Viam.Common.V1.GetKinematicsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetKinematics, null, options, request);
      }
      /// <summary>
      /// GetKinematics returns the kinematics file for the component
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.GetKinematicsResponse> GetKinematicsAsync(global::Viam.Common.V1.GetKinematicsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKinematicsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetKinematics returns the kinematics file for the component
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.GetKinematicsResponse> GetKinematicsAsync(global::Viam.Common.V1.GetKinematicsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetKinematics, null, options, request);
      }
      /// <summary>
      /// GetGeometries returns the geometries of the component in their current configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.GetGeometriesResponse GetGeometries(global::Viam.Common.V1.GetGeometriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGeometries(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGeometries returns the geometries of the component in their current configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.GetGeometriesResponse GetGeometries(global::Viam.Common.V1.GetGeometriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGeometries, null, options, request);
      }
      /// <summary>
      /// GetGeometries returns the geometries of the component in their current configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.GetGeometriesResponse> GetGeometriesAsync(global::Viam.Common.V1.GetGeometriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGeometriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGeometries returns the geometries of the component in their current configuration
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.GetGeometriesResponse> GetGeometriesAsync(global::Viam.Common.V1.GetGeometriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGeometries, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ArmServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ArmServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ArmServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetEndPosition, serviceImpl.GetEndPosition)
          .AddMethod(__Method_MoveToPosition, serviceImpl.MoveToPosition)
          .AddMethod(__Method_GetJointPositions, serviceImpl.GetJointPositions)
          .AddMethod(__Method_MoveToJointPositions, serviceImpl.MoveToJointPositions)
          .AddMethod(__Method_Stop, serviceImpl.Stop)
          .AddMethod(__Method_IsMoving, serviceImpl.IsMoving)
          .AddMethod(__Method_DoCommand, serviceImpl.DoCommand)
          .AddMethod(__Method_GetKinematics, serviceImpl.GetKinematics)
          .AddMethod(__Method_GetGeometries, serviceImpl.GetGeometries).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ArmServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetEndPosition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Arm.V1.GetEndPositionRequest, global::Viam.Component.Arm.V1.GetEndPositionResponse>(serviceImpl.GetEndPosition));
      serviceBinder.AddMethod(__Method_MoveToPosition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Arm.V1.MoveToPositionRequest, global::Viam.Component.Arm.V1.MoveToPositionResponse>(serviceImpl.MoveToPosition));
      serviceBinder.AddMethod(__Method_GetJointPositions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Arm.V1.GetJointPositionsRequest, global::Viam.Component.Arm.V1.GetJointPositionsResponse>(serviceImpl.GetJointPositions));
      serviceBinder.AddMethod(__Method_MoveToJointPositions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Arm.V1.MoveToJointPositionsRequest, global::Viam.Component.Arm.V1.MoveToJointPositionsResponse>(serviceImpl.MoveToJointPositions));
      serviceBinder.AddMethod(__Method_Stop, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Arm.V1.StopRequest, global::Viam.Component.Arm.V1.StopResponse>(serviceImpl.Stop));
      serviceBinder.AddMethod(__Method_IsMoving, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Arm.V1.IsMovingRequest, global::Viam.Component.Arm.V1.IsMovingResponse>(serviceImpl.IsMoving));
      serviceBinder.AddMethod(__Method_DoCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Common.V1.DoCommandRequest, global::Viam.Common.V1.DoCommandResponse>(serviceImpl.DoCommand));
      serviceBinder.AddMethod(__Method_GetKinematics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Common.V1.GetKinematicsRequest, global::Viam.Common.V1.GetKinematicsResponse>(serviceImpl.GetKinematics));
      serviceBinder.AddMethod(__Method_GetGeometries, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Common.V1.GetGeometriesRequest, global::Viam.Common.V1.GetGeometriesResponse>(serviceImpl.GetGeometries));
    }

  }
}
#endregion
