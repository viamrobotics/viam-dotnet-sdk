// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: component/board/v1/board.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Viam.Component.Board.V1 {
  /// <summary>
  /// BoardService services all Boards associated with a robot
  /// </summary>
  public static partial class BoardService
  {
    static readonly string __ServiceName = "viam.component.board.v1.BoardService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.StatusRequest> __Marshaller_viam_component_board_v1_StatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.StatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.StatusResponse> __Marshaller_viam_component_board_v1_StatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.StatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.SetGPIORequest> __Marshaller_viam_component_board_v1_SetGPIORequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.SetGPIORequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.SetGPIOResponse> __Marshaller_viam_component_board_v1_SetGPIOResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.SetGPIOResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.GetGPIORequest> __Marshaller_viam_component_board_v1_GetGPIORequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.GetGPIORequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.GetGPIOResponse> __Marshaller_viam_component_board_v1_GetGPIOResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.GetGPIOResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.PWMRequest> __Marshaller_viam_component_board_v1_PWMRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.PWMRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.PWMResponse> __Marshaller_viam_component_board_v1_PWMResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.PWMResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.SetPWMRequest> __Marshaller_viam_component_board_v1_SetPWMRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.SetPWMRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.SetPWMResponse> __Marshaller_viam_component_board_v1_SetPWMResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.SetPWMResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.PWMFrequencyRequest> __Marshaller_viam_component_board_v1_PWMFrequencyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.PWMFrequencyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.PWMFrequencyResponse> __Marshaller_viam_component_board_v1_PWMFrequencyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.PWMFrequencyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.SetPWMFrequencyRequest> __Marshaller_viam_component_board_v1_SetPWMFrequencyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.SetPWMFrequencyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.SetPWMFrequencyResponse> __Marshaller_viam_component_board_v1_SetPWMFrequencyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.SetPWMFrequencyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.DoCommandRequest> __Marshaller_viam_common_v1_DoCommandRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.DoCommandRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.DoCommandResponse> __Marshaller_viam_common_v1_DoCommandResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.DoCommandResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.ReadAnalogReaderRequest> __Marshaller_viam_component_board_v1_ReadAnalogReaderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.ReadAnalogReaderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.ReadAnalogReaderResponse> __Marshaller_viam_component_board_v1_ReadAnalogReaderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.ReadAnalogReaderResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.WriteAnalogRequest> __Marshaller_viam_component_board_v1_WriteAnalogRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.WriteAnalogRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.WriteAnalogResponse> __Marshaller_viam_component_board_v1_WriteAnalogResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.WriteAnalogResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.GetDigitalInterruptValueRequest> __Marshaller_viam_component_board_v1_GetDigitalInterruptValueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.GetDigitalInterruptValueRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.GetDigitalInterruptValueResponse> __Marshaller_viam_component_board_v1_GetDigitalInterruptValueResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.GetDigitalInterruptValueResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.StreamTicksRequest> __Marshaller_viam_component_board_v1_StreamTicksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.StreamTicksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.StreamTicksResponse> __Marshaller_viam_component_board_v1_StreamTicksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.StreamTicksResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.SetPowerModeRequest> __Marshaller_viam_component_board_v1_SetPowerModeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.SetPowerModeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Component.Board.V1.SetPowerModeResponse> __Marshaller_viam_component_board_v1_SetPowerModeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Component.Board.V1.SetPowerModeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.GetGeometriesRequest> __Marshaller_viam_common_v1_GetGeometriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.GetGeometriesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.GetGeometriesResponse> __Marshaller_viam_common_v1_GetGeometriesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.GetGeometriesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Board.V1.StatusRequest, global::Viam.Component.Board.V1.StatusResponse> __Method_Status = new grpc::Method<global::Viam.Component.Board.V1.StatusRequest, global::Viam.Component.Board.V1.StatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Status",
        __Marshaller_viam_component_board_v1_StatusRequest,
        __Marshaller_viam_component_board_v1_StatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Board.V1.SetGPIORequest, global::Viam.Component.Board.V1.SetGPIOResponse> __Method_SetGPIO = new grpc::Method<global::Viam.Component.Board.V1.SetGPIORequest, global::Viam.Component.Board.V1.SetGPIOResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetGPIO",
        __Marshaller_viam_component_board_v1_SetGPIORequest,
        __Marshaller_viam_component_board_v1_SetGPIOResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Board.V1.GetGPIORequest, global::Viam.Component.Board.V1.GetGPIOResponse> __Method_GetGPIO = new grpc::Method<global::Viam.Component.Board.V1.GetGPIORequest, global::Viam.Component.Board.V1.GetGPIOResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGPIO",
        __Marshaller_viam_component_board_v1_GetGPIORequest,
        __Marshaller_viam_component_board_v1_GetGPIOResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Board.V1.PWMRequest, global::Viam.Component.Board.V1.PWMResponse> __Method_PWM = new grpc::Method<global::Viam.Component.Board.V1.PWMRequest, global::Viam.Component.Board.V1.PWMResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PWM",
        __Marshaller_viam_component_board_v1_PWMRequest,
        __Marshaller_viam_component_board_v1_PWMResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Board.V1.SetPWMRequest, global::Viam.Component.Board.V1.SetPWMResponse> __Method_SetPWM = new grpc::Method<global::Viam.Component.Board.V1.SetPWMRequest, global::Viam.Component.Board.V1.SetPWMResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPWM",
        __Marshaller_viam_component_board_v1_SetPWMRequest,
        __Marshaller_viam_component_board_v1_SetPWMResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Board.V1.PWMFrequencyRequest, global::Viam.Component.Board.V1.PWMFrequencyResponse> __Method_PWMFrequency = new grpc::Method<global::Viam.Component.Board.V1.PWMFrequencyRequest, global::Viam.Component.Board.V1.PWMFrequencyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PWMFrequency",
        __Marshaller_viam_component_board_v1_PWMFrequencyRequest,
        __Marshaller_viam_component_board_v1_PWMFrequencyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Board.V1.SetPWMFrequencyRequest, global::Viam.Component.Board.V1.SetPWMFrequencyResponse> __Method_SetPWMFrequency = new grpc::Method<global::Viam.Component.Board.V1.SetPWMFrequencyRequest, global::Viam.Component.Board.V1.SetPWMFrequencyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPWMFrequency",
        __Marshaller_viam_component_board_v1_SetPWMFrequencyRequest,
        __Marshaller_viam_component_board_v1_SetPWMFrequencyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Common.V1.DoCommandRequest, global::Viam.Common.V1.DoCommandResponse> __Method_DoCommand = new grpc::Method<global::Viam.Common.V1.DoCommandRequest, global::Viam.Common.V1.DoCommandResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DoCommand",
        __Marshaller_viam_common_v1_DoCommandRequest,
        __Marshaller_viam_common_v1_DoCommandResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Board.V1.ReadAnalogReaderRequest, global::Viam.Component.Board.V1.ReadAnalogReaderResponse> __Method_ReadAnalogReader = new grpc::Method<global::Viam.Component.Board.V1.ReadAnalogReaderRequest, global::Viam.Component.Board.V1.ReadAnalogReaderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReadAnalogReader",
        __Marshaller_viam_component_board_v1_ReadAnalogReaderRequest,
        __Marshaller_viam_component_board_v1_ReadAnalogReaderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Board.V1.WriteAnalogRequest, global::Viam.Component.Board.V1.WriteAnalogResponse> __Method_WriteAnalog = new grpc::Method<global::Viam.Component.Board.V1.WriteAnalogRequest, global::Viam.Component.Board.V1.WriteAnalogResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WriteAnalog",
        __Marshaller_viam_component_board_v1_WriteAnalogRequest,
        __Marshaller_viam_component_board_v1_WriteAnalogResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Board.V1.GetDigitalInterruptValueRequest, global::Viam.Component.Board.V1.GetDigitalInterruptValueResponse> __Method_GetDigitalInterruptValue = new grpc::Method<global::Viam.Component.Board.V1.GetDigitalInterruptValueRequest, global::Viam.Component.Board.V1.GetDigitalInterruptValueResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDigitalInterruptValue",
        __Marshaller_viam_component_board_v1_GetDigitalInterruptValueRequest,
        __Marshaller_viam_component_board_v1_GetDigitalInterruptValueResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Board.V1.StreamTicksRequest, global::Viam.Component.Board.V1.StreamTicksResponse> __Method_StreamTicks = new grpc::Method<global::Viam.Component.Board.V1.StreamTicksRequest, global::Viam.Component.Board.V1.StreamTicksResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamTicks",
        __Marshaller_viam_component_board_v1_StreamTicksRequest,
        __Marshaller_viam_component_board_v1_StreamTicksResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Component.Board.V1.SetPowerModeRequest, global::Viam.Component.Board.V1.SetPowerModeResponse> __Method_SetPowerMode = new grpc::Method<global::Viam.Component.Board.V1.SetPowerModeRequest, global::Viam.Component.Board.V1.SetPowerModeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPowerMode",
        __Marshaller_viam_component_board_v1_SetPowerModeRequest,
        __Marshaller_viam_component_board_v1_SetPowerModeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Common.V1.GetGeometriesRequest, global::Viam.Common.V1.GetGeometriesResponse> __Method_GetGeometries = new grpc::Method<global::Viam.Common.V1.GetGeometriesRequest, global::Viam.Common.V1.GetGeometriesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGeometries",
        __Marshaller_viam_common_v1_GetGeometriesRequest,
        __Marshaller_viam_common_v1_GetGeometriesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Viam.Component.Board.V1.BoardReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BoardService</summary>
    [grpc::BindServiceMethod(typeof(BoardService), "BindService")]
    public abstract partial class BoardServiceBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Board.V1.StatusResponse> Status(global::Viam.Component.Board.V1.StatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Board.V1.SetGPIOResponse> SetGPIO(global::Viam.Component.Board.V1.SetGPIORequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetGPIO gets the high/low state of the given pin of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Board.V1.GetGPIOResponse> GetGPIO(global::Viam.Component.Board.V1.GetGPIORequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PWM gets the duty cycle of the given pin of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Board.V1.PWMResponse> PWM(global::Viam.Component.Board.V1.PWMRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SetPWM sets the given pin of a board of the underlying robot to the given duty cycle.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Board.V1.SetPWMResponse> SetPWM(global::Viam.Component.Board.V1.SetPWMRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PWMFrequency gets the PWM frequency of the given pin of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Board.V1.PWMFrequencyResponse> PWMFrequency(global::Viam.Component.Board.V1.PWMFrequencyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SetPWMFrequency sets the given pin of a board of the underlying robot to the given PWM frequency. 0 will use the board's default PWM frequency.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Board.V1.SetPWMFrequencyResponse> SetPWMFrequency(global::Viam.Component.Board.V1.SetPWMFrequencyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Common.V1.DoCommandResponse> DoCommand(global::Viam.Common.V1.DoCommandRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ReadAnalogReader reads off the current value of an analog reader of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Board.V1.ReadAnalogReaderResponse> ReadAnalogReader(global::Viam.Component.Board.V1.ReadAnalogReaderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// WriteAnalog writes the value to the analog writer of the board.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Board.V1.WriteAnalogResponse> WriteAnalog(global::Viam.Component.Board.V1.WriteAnalogRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetDigitalInterruptValue returns the current value of the interrupt which is based on the type of interrupt.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Board.V1.GetDigitalInterruptValueResponse> GetDigitalInterruptValue(global::Viam.Component.Board.V1.GetDigitalInterruptValueRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StreamTicks starts a stream of ticks for the given digital interrupts.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamTicks(global::Viam.Component.Board.V1.StreamTicksRequest request, grpc::IServerStreamWriter<global::Viam.Component.Board.V1.StreamTicksResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// `SetPowerMode` sets the power consumption mode of the board to the requested setting for the given duration.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Component.Board.V1.SetPowerModeResponse> SetPowerMode(global::Viam.Component.Board.V1.SetPowerModeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetGeometries returns the geometries of the component in their current configuration.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Common.V1.GetGeometriesResponse> GetGeometries(global::Viam.Common.V1.GetGeometriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BoardService</summary>
    public partial class BoardServiceClient : grpc::ClientBase<BoardServiceClient>
    {
      /// <summary>Creates a new client for BoardService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public BoardServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BoardService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public BoardServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected BoardServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected BoardServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.StatusResponse Status(global::Viam.Component.Board.V1.StatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Status(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.StatusResponse Status(global::Viam.Component.Board.V1.StatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Status, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.StatusResponse> StatusAsync(global::Viam.Component.Board.V1.StatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.StatusResponse> StatusAsync(global::Viam.Component.Board.V1.StatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Status, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.SetGPIOResponse SetGPIO(global::Viam.Component.Board.V1.SetGPIORequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetGPIO(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.SetGPIOResponse SetGPIO(global::Viam.Component.Board.V1.SetGPIORequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetGPIO, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.SetGPIOResponse> SetGPIOAsync(global::Viam.Component.Board.V1.SetGPIORequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetGPIOAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.SetGPIOResponse> SetGPIOAsync(global::Viam.Component.Board.V1.SetGPIORequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetGPIO, null, options, request);
      }
      /// <summary>
      /// GetGPIO gets the high/low state of the given pin of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.GetGPIOResponse GetGPIO(global::Viam.Component.Board.V1.GetGPIORequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGPIO(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGPIO gets the high/low state of the given pin of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.GetGPIOResponse GetGPIO(global::Viam.Component.Board.V1.GetGPIORequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGPIO, null, options, request);
      }
      /// <summary>
      /// GetGPIO gets the high/low state of the given pin of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.GetGPIOResponse> GetGPIOAsync(global::Viam.Component.Board.V1.GetGPIORequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGPIOAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGPIO gets the high/low state of the given pin of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.GetGPIOResponse> GetGPIOAsync(global::Viam.Component.Board.V1.GetGPIORequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGPIO, null, options, request);
      }
      /// <summary>
      /// PWM gets the duty cycle of the given pin of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.PWMResponse PWM(global::Viam.Component.Board.V1.PWMRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PWM(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PWM gets the duty cycle of the given pin of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.PWMResponse PWM(global::Viam.Component.Board.V1.PWMRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PWM, null, options, request);
      }
      /// <summary>
      /// PWM gets the duty cycle of the given pin of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.PWMResponse> PWMAsync(global::Viam.Component.Board.V1.PWMRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PWMAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PWM gets the duty cycle of the given pin of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.PWMResponse> PWMAsync(global::Viam.Component.Board.V1.PWMRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PWM, null, options, request);
      }
      /// <summary>
      /// SetPWM sets the given pin of a board of the underlying robot to the given duty cycle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.SetPWMResponse SetPWM(global::Viam.Component.Board.V1.SetPWMRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPWM(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetPWM sets the given pin of a board of the underlying robot to the given duty cycle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.SetPWMResponse SetPWM(global::Viam.Component.Board.V1.SetPWMRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPWM, null, options, request);
      }
      /// <summary>
      /// SetPWM sets the given pin of a board of the underlying robot to the given duty cycle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.SetPWMResponse> SetPWMAsync(global::Viam.Component.Board.V1.SetPWMRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPWMAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetPWM sets the given pin of a board of the underlying robot to the given duty cycle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.SetPWMResponse> SetPWMAsync(global::Viam.Component.Board.V1.SetPWMRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPWM, null, options, request);
      }
      /// <summary>
      /// PWMFrequency gets the PWM frequency of the given pin of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.PWMFrequencyResponse PWMFrequency(global::Viam.Component.Board.V1.PWMFrequencyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PWMFrequency(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PWMFrequency gets the PWM frequency of the given pin of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.PWMFrequencyResponse PWMFrequency(global::Viam.Component.Board.V1.PWMFrequencyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PWMFrequency, null, options, request);
      }
      /// <summary>
      /// PWMFrequency gets the PWM frequency of the given pin of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.PWMFrequencyResponse> PWMFrequencyAsync(global::Viam.Component.Board.V1.PWMFrequencyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PWMFrequencyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PWMFrequency gets the PWM frequency of the given pin of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.PWMFrequencyResponse> PWMFrequencyAsync(global::Viam.Component.Board.V1.PWMFrequencyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PWMFrequency, null, options, request);
      }
      /// <summary>
      /// SetPWMFrequency sets the given pin of a board of the underlying robot to the given PWM frequency. 0 will use the board's default PWM frequency.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.SetPWMFrequencyResponse SetPWMFrequency(global::Viam.Component.Board.V1.SetPWMFrequencyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPWMFrequency(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetPWMFrequency sets the given pin of a board of the underlying robot to the given PWM frequency. 0 will use the board's default PWM frequency.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.SetPWMFrequencyResponse SetPWMFrequency(global::Viam.Component.Board.V1.SetPWMFrequencyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPWMFrequency, null, options, request);
      }
      /// <summary>
      /// SetPWMFrequency sets the given pin of a board of the underlying robot to the given PWM frequency. 0 will use the board's default PWM frequency.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.SetPWMFrequencyResponse> SetPWMFrequencyAsync(global::Viam.Component.Board.V1.SetPWMFrequencyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPWMFrequencyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetPWMFrequency sets the given pin of a board of the underlying robot to the given PWM frequency. 0 will use the board's default PWM frequency.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.SetPWMFrequencyResponse> SetPWMFrequencyAsync(global::Viam.Component.Board.V1.SetPWMFrequencyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPWMFrequency, null, options, request);
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.DoCommandResponse DoCommand(global::Viam.Common.V1.DoCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DoCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.DoCommandResponse DoCommand(global::Viam.Common.V1.DoCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DoCommand, null, options, request);
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.DoCommandResponse> DoCommandAsync(global::Viam.Common.V1.DoCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DoCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.DoCommandResponse> DoCommandAsync(global::Viam.Common.V1.DoCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DoCommand, null, options, request);
      }
      /// <summary>
      /// ReadAnalogReader reads off the current value of an analog reader of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.ReadAnalogReaderResponse ReadAnalogReader(global::Viam.Component.Board.V1.ReadAnalogReaderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadAnalogReader(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ReadAnalogReader reads off the current value of an analog reader of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.ReadAnalogReaderResponse ReadAnalogReader(global::Viam.Component.Board.V1.ReadAnalogReaderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReadAnalogReader, null, options, request);
      }
      /// <summary>
      /// ReadAnalogReader reads off the current value of an analog reader of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.ReadAnalogReaderResponse> ReadAnalogReaderAsync(global::Viam.Component.Board.V1.ReadAnalogReaderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadAnalogReaderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ReadAnalogReader reads off the current value of an analog reader of a board of the underlying robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.ReadAnalogReaderResponse> ReadAnalogReaderAsync(global::Viam.Component.Board.V1.ReadAnalogReaderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReadAnalogReader, null, options, request);
      }
      /// <summary>
      /// WriteAnalog writes the value to the analog writer of the board.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.WriteAnalogResponse WriteAnalog(global::Viam.Component.Board.V1.WriteAnalogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WriteAnalog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// WriteAnalog writes the value to the analog writer of the board.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.WriteAnalogResponse WriteAnalog(global::Viam.Component.Board.V1.WriteAnalogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WriteAnalog, null, options, request);
      }
      /// <summary>
      /// WriteAnalog writes the value to the analog writer of the board.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.WriteAnalogResponse> WriteAnalogAsync(global::Viam.Component.Board.V1.WriteAnalogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WriteAnalogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// WriteAnalog writes the value to the analog writer of the board.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.WriteAnalogResponse> WriteAnalogAsync(global::Viam.Component.Board.V1.WriteAnalogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WriteAnalog, null, options, request);
      }
      /// <summary>
      /// GetDigitalInterruptValue returns the current value of the interrupt which is based on the type of interrupt.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.GetDigitalInterruptValueResponse GetDigitalInterruptValue(global::Viam.Component.Board.V1.GetDigitalInterruptValueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDigitalInterruptValue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDigitalInterruptValue returns the current value of the interrupt which is based on the type of interrupt.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.GetDigitalInterruptValueResponse GetDigitalInterruptValue(global::Viam.Component.Board.V1.GetDigitalInterruptValueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDigitalInterruptValue, null, options, request);
      }
      /// <summary>
      /// GetDigitalInterruptValue returns the current value of the interrupt which is based on the type of interrupt.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.GetDigitalInterruptValueResponse> GetDigitalInterruptValueAsync(global::Viam.Component.Board.V1.GetDigitalInterruptValueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDigitalInterruptValueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDigitalInterruptValue returns the current value of the interrupt which is based on the type of interrupt.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.GetDigitalInterruptValueResponse> GetDigitalInterruptValueAsync(global::Viam.Component.Board.V1.GetDigitalInterruptValueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDigitalInterruptValue, null, options, request);
      }
      /// <summary>
      /// StreamTicks starts a stream of ticks for the given digital interrupts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Viam.Component.Board.V1.StreamTicksResponse> StreamTicks(global::Viam.Component.Board.V1.StreamTicksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamTicks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamTicks starts a stream of ticks for the given digital interrupts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Viam.Component.Board.V1.StreamTicksResponse> StreamTicks(global::Viam.Component.Board.V1.StreamTicksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamTicks, null, options, request);
      }
      /// <summary>
      /// `SetPowerMode` sets the power consumption mode of the board to the requested setting for the given duration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.SetPowerModeResponse SetPowerMode(global::Viam.Component.Board.V1.SetPowerModeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPowerMode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `SetPowerMode` sets the power consumption mode of the board to the requested setting for the given duration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Component.Board.V1.SetPowerModeResponse SetPowerMode(global::Viam.Component.Board.V1.SetPowerModeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPowerMode, null, options, request);
      }
      /// <summary>
      /// `SetPowerMode` sets the power consumption mode of the board to the requested setting for the given duration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.SetPowerModeResponse> SetPowerModeAsync(global::Viam.Component.Board.V1.SetPowerModeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPowerModeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `SetPowerMode` sets the power consumption mode of the board to the requested setting for the given duration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Component.Board.V1.SetPowerModeResponse> SetPowerModeAsync(global::Viam.Component.Board.V1.SetPowerModeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPowerMode, null, options, request);
      }
      /// <summary>
      /// GetGeometries returns the geometries of the component in their current configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.GetGeometriesResponse GetGeometries(global::Viam.Common.V1.GetGeometriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGeometries(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGeometries returns the geometries of the component in their current configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.GetGeometriesResponse GetGeometries(global::Viam.Common.V1.GetGeometriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGeometries, null, options, request);
      }
      /// <summary>
      /// GetGeometries returns the geometries of the component in their current configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.GetGeometriesResponse> GetGeometriesAsync(global::Viam.Common.V1.GetGeometriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGeometriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetGeometries returns the geometries of the component in their current configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.GetGeometriesResponse> GetGeometriesAsync(global::Viam.Common.V1.GetGeometriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGeometries, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override BoardServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BoardServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(BoardServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Status, serviceImpl.Status)
          .AddMethod(__Method_SetGPIO, serviceImpl.SetGPIO)
          .AddMethod(__Method_GetGPIO, serviceImpl.GetGPIO)
          .AddMethod(__Method_PWM, serviceImpl.PWM)
          .AddMethod(__Method_SetPWM, serviceImpl.SetPWM)
          .AddMethod(__Method_PWMFrequency, serviceImpl.PWMFrequency)
          .AddMethod(__Method_SetPWMFrequency, serviceImpl.SetPWMFrequency)
          .AddMethod(__Method_DoCommand, serviceImpl.DoCommand)
          .AddMethod(__Method_ReadAnalogReader, serviceImpl.ReadAnalogReader)
          .AddMethod(__Method_WriteAnalog, serviceImpl.WriteAnalog)
          .AddMethod(__Method_GetDigitalInterruptValue, serviceImpl.GetDigitalInterruptValue)
          .AddMethod(__Method_StreamTicks, serviceImpl.StreamTicks)
          .AddMethod(__Method_SetPowerMode, serviceImpl.SetPowerMode)
          .AddMethod(__Method_GetGeometries, serviceImpl.GetGeometries).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BoardServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Status, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Board.V1.StatusRequest, global::Viam.Component.Board.V1.StatusResponse>(serviceImpl.Status));
      serviceBinder.AddMethod(__Method_SetGPIO, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Board.V1.SetGPIORequest, global::Viam.Component.Board.V1.SetGPIOResponse>(serviceImpl.SetGPIO));
      serviceBinder.AddMethod(__Method_GetGPIO, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Board.V1.GetGPIORequest, global::Viam.Component.Board.V1.GetGPIOResponse>(serviceImpl.GetGPIO));
      serviceBinder.AddMethod(__Method_PWM, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Board.V1.PWMRequest, global::Viam.Component.Board.V1.PWMResponse>(serviceImpl.PWM));
      serviceBinder.AddMethod(__Method_SetPWM, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Board.V1.SetPWMRequest, global::Viam.Component.Board.V1.SetPWMResponse>(serviceImpl.SetPWM));
      serviceBinder.AddMethod(__Method_PWMFrequency, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Board.V1.PWMFrequencyRequest, global::Viam.Component.Board.V1.PWMFrequencyResponse>(serviceImpl.PWMFrequency));
      serviceBinder.AddMethod(__Method_SetPWMFrequency, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Board.V1.SetPWMFrequencyRequest, global::Viam.Component.Board.V1.SetPWMFrequencyResponse>(serviceImpl.SetPWMFrequency));
      serviceBinder.AddMethod(__Method_DoCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Common.V1.DoCommandRequest, global::Viam.Common.V1.DoCommandResponse>(serviceImpl.DoCommand));
      serviceBinder.AddMethod(__Method_ReadAnalogReader, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Board.V1.ReadAnalogReaderRequest, global::Viam.Component.Board.V1.ReadAnalogReaderResponse>(serviceImpl.ReadAnalogReader));
      serviceBinder.AddMethod(__Method_WriteAnalog, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Board.V1.WriteAnalogRequest, global::Viam.Component.Board.V1.WriteAnalogResponse>(serviceImpl.WriteAnalog));
      serviceBinder.AddMethod(__Method_GetDigitalInterruptValue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Board.V1.GetDigitalInterruptValueRequest, global::Viam.Component.Board.V1.GetDigitalInterruptValueResponse>(serviceImpl.GetDigitalInterruptValue));
      serviceBinder.AddMethod(__Method_StreamTicks, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Viam.Component.Board.V1.StreamTicksRequest, global::Viam.Component.Board.V1.StreamTicksResponse>(serviceImpl.StreamTicks));
      serviceBinder.AddMethod(__Method_SetPowerMode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Component.Board.V1.SetPowerModeRequest, global::Viam.Component.Board.V1.SetPowerModeResponse>(serviceImpl.SetPowerMode));
      serviceBinder.AddMethod(__Method_GetGeometries, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Common.V1.GetGeometriesRequest, global::Viam.Common.V1.GetGeometriesResponse>(serviceImpl.GetGeometries));
    }

  }
}
#endregion
