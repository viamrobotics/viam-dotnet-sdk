// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: service/vision/v1/vision.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Viam.Service.Vision.V1 {
  /// <summary>
  /// VisionService declares the gRPC contract for a vision service
  /// </summary>
  public static partial class VisionService
  {
    static readonly string __ServiceName = "viam.service.vision.v1.VisionService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Service.Vision.V1.GetDetectionsFromCameraRequest> __Marshaller_viam_service_vision_v1_GetDetectionsFromCameraRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Service.Vision.V1.GetDetectionsFromCameraRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Service.Vision.V1.GetDetectionsFromCameraResponse> __Marshaller_viam_service_vision_v1_GetDetectionsFromCameraResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Service.Vision.V1.GetDetectionsFromCameraResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Service.Vision.V1.GetDetectionsRequest> __Marshaller_viam_service_vision_v1_GetDetectionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Service.Vision.V1.GetDetectionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Service.Vision.V1.GetDetectionsResponse> __Marshaller_viam_service_vision_v1_GetDetectionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Service.Vision.V1.GetDetectionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Service.Vision.V1.GetClassificationsFromCameraRequest> __Marshaller_viam_service_vision_v1_GetClassificationsFromCameraRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Service.Vision.V1.GetClassificationsFromCameraRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Service.Vision.V1.GetClassificationsFromCameraResponse> __Marshaller_viam_service_vision_v1_GetClassificationsFromCameraResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Service.Vision.V1.GetClassificationsFromCameraResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Service.Vision.V1.GetClassificationsRequest> __Marshaller_viam_service_vision_v1_GetClassificationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Service.Vision.V1.GetClassificationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Service.Vision.V1.GetClassificationsResponse> __Marshaller_viam_service_vision_v1_GetClassificationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Service.Vision.V1.GetClassificationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Service.Vision.V1.GetObjectPointCloudsRequest> __Marshaller_viam_service_vision_v1_GetObjectPointCloudsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Service.Vision.V1.GetObjectPointCloudsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Service.Vision.V1.GetObjectPointCloudsResponse> __Marshaller_viam_service_vision_v1_GetObjectPointCloudsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Service.Vision.V1.GetObjectPointCloudsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.DoCommandRequest> __Marshaller_viam_common_v1_DoCommandRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.DoCommandRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Common.V1.DoCommandResponse> __Marshaller_viam_common_v1_DoCommandResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Common.V1.DoCommandResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Service.Vision.V1.GetDetectionsFromCameraRequest, global::Viam.Service.Vision.V1.GetDetectionsFromCameraResponse> __Method_GetDetectionsFromCamera = new grpc::Method<global::Viam.Service.Vision.V1.GetDetectionsFromCameraRequest, global::Viam.Service.Vision.V1.GetDetectionsFromCameraResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDetectionsFromCamera",
        __Marshaller_viam_service_vision_v1_GetDetectionsFromCameraRequest,
        __Marshaller_viam_service_vision_v1_GetDetectionsFromCameraResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Service.Vision.V1.GetDetectionsRequest, global::Viam.Service.Vision.V1.GetDetectionsResponse> __Method_GetDetections = new grpc::Method<global::Viam.Service.Vision.V1.GetDetectionsRequest, global::Viam.Service.Vision.V1.GetDetectionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDetections",
        __Marshaller_viam_service_vision_v1_GetDetectionsRequest,
        __Marshaller_viam_service_vision_v1_GetDetectionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Service.Vision.V1.GetClassificationsFromCameraRequest, global::Viam.Service.Vision.V1.GetClassificationsFromCameraResponse> __Method_GetClassificationsFromCamera = new grpc::Method<global::Viam.Service.Vision.V1.GetClassificationsFromCameraRequest, global::Viam.Service.Vision.V1.GetClassificationsFromCameraResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetClassificationsFromCamera",
        __Marshaller_viam_service_vision_v1_GetClassificationsFromCameraRequest,
        __Marshaller_viam_service_vision_v1_GetClassificationsFromCameraResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Service.Vision.V1.GetClassificationsRequest, global::Viam.Service.Vision.V1.GetClassificationsResponse> __Method_GetClassifications = new grpc::Method<global::Viam.Service.Vision.V1.GetClassificationsRequest, global::Viam.Service.Vision.V1.GetClassificationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetClassifications",
        __Marshaller_viam_service_vision_v1_GetClassificationsRequest,
        __Marshaller_viam_service_vision_v1_GetClassificationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Service.Vision.V1.GetObjectPointCloudsRequest, global::Viam.Service.Vision.V1.GetObjectPointCloudsResponse> __Method_GetObjectPointClouds = new grpc::Method<global::Viam.Service.Vision.V1.GetObjectPointCloudsRequest, global::Viam.Service.Vision.V1.GetObjectPointCloudsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetObjectPointClouds",
        __Marshaller_viam_service_vision_v1_GetObjectPointCloudsRequest,
        __Marshaller_viam_service_vision_v1_GetObjectPointCloudsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Common.V1.DoCommandRequest, global::Viam.Common.V1.DoCommandResponse> __Method_DoCommand = new grpc::Method<global::Viam.Common.V1.DoCommandRequest, global::Viam.Common.V1.DoCommandResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DoCommand",
        __Marshaller_viam_common_v1_DoCommandRequest,
        __Marshaller_viam_common_v1_DoCommandResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Viam.Service.Vision.V1.VisionReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of VisionService</summary>
    [grpc::BindServiceMethod(typeof(VisionService), "BindService")]
    public abstract partial class VisionServiceBase
    {
      /// <summary>
      /// GetDetectionsFromCamera will return a list of detections in the next image given a camera and a detector
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Service.Vision.V1.GetDetectionsFromCameraResponse> GetDetectionsFromCamera(global::Viam.Service.Vision.V1.GetDetectionsFromCameraRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetDetections will return a list of detections in the next image given the image bytes and a detector
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Service.Vision.V1.GetDetectionsResponse> GetDetections(global::Viam.Service.Vision.V1.GetDetectionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetClassificationsFromCamera will return a list of classifications in the next image given a camera and a classifier
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Service.Vision.V1.GetClassificationsFromCameraResponse> GetClassificationsFromCamera(global::Viam.Service.Vision.V1.GetClassificationsFromCameraRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetClassifications will return a list of classifications in the next image given the image bytes and a classifier
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Service.Vision.V1.GetClassificationsResponse> GetClassifications(global::Viam.Service.Vision.V1.GetClassificationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
      /// as well as the 3-vector center of each of the found objects.
      /// A specific MIME type can be requested but may not necessarily be the same one returned.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Service.Vision.V1.GetObjectPointCloudsResponse> GetObjectPointClouds(global::Viam.Service.Vision.V1.GetObjectPointCloudsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Common.V1.DoCommandResponse> DoCommand(global::Viam.Common.V1.DoCommandRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VisionService</summary>
    public partial class VisionServiceClient : grpc::ClientBase<VisionServiceClient>
    {
      /// <summary>Creates a new client for VisionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public VisionServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VisionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public VisionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected VisionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected VisionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// GetDetectionsFromCamera will return a list of detections in the next image given a camera and a detector
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Service.Vision.V1.GetDetectionsFromCameraResponse GetDetectionsFromCamera(global::Viam.Service.Vision.V1.GetDetectionsFromCameraRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDetectionsFromCamera(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDetectionsFromCamera will return a list of detections in the next image given a camera and a detector
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Service.Vision.V1.GetDetectionsFromCameraResponse GetDetectionsFromCamera(global::Viam.Service.Vision.V1.GetDetectionsFromCameraRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDetectionsFromCamera, null, options, request);
      }
      /// <summary>
      /// GetDetectionsFromCamera will return a list of detections in the next image given a camera and a detector
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Service.Vision.V1.GetDetectionsFromCameraResponse> GetDetectionsFromCameraAsync(global::Viam.Service.Vision.V1.GetDetectionsFromCameraRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDetectionsFromCameraAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDetectionsFromCamera will return a list of detections in the next image given a camera and a detector
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Service.Vision.V1.GetDetectionsFromCameraResponse> GetDetectionsFromCameraAsync(global::Viam.Service.Vision.V1.GetDetectionsFromCameraRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDetectionsFromCamera, null, options, request);
      }
      /// <summary>
      /// GetDetections will return a list of detections in the next image given the image bytes and a detector
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Service.Vision.V1.GetDetectionsResponse GetDetections(global::Viam.Service.Vision.V1.GetDetectionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDetections(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDetections will return a list of detections in the next image given the image bytes and a detector
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Service.Vision.V1.GetDetectionsResponse GetDetections(global::Viam.Service.Vision.V1.GetDetectionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDetections, null, options, request);
      }
      /// <summary>
      /// GetDetections will return a list of detections in the next image given the image bytes and a detector
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Service.Vision.V1.GetDetectionsResponse> GetDetectionsAsync(global::Viam.Service.Vision.V1.GetDetectionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDetectionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDetections will return a list of detections in the next image given the image bytes and a detector
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Service.Vision.V1.GetDetectionsResponse> GetDetectionsAsync(global::Viam.Service.Vision.V1.GetDetectionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDetections, null, options, request);
      }
      /// <summary>
      /// GetClassificationsFromCamera will return a list of classifications in the next image given a camera and a classifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Service.Vision.V1.GetClassificationsFromCameraResponse GetClassificationsFromCamera(global::Viam.Service.Vision.V1.GetClassificationsFromCameraRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetClassificationsFromCamera(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetClassificationsFromCamera will return a list of classifications in the next image given a camera and a classifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Service.Vision.V1.GetClassificationsFromCameraResponse GetClassificationsFromCamera(global::Viam.Service.Vision.V1.GetClassificationsFromCameraRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetClassificationsFromCamera, null, options, request);
      }
      /// <summary>
      /// GetClassificationsFromCamera will return a list of classifications in the next image given a camera and a classifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Service.Vision.V1.GetClassificationsFromCameraResponse> GetClassificationsFromCameraAsync(global::Viam.Service.Vision.V1.GetClassificationsFromCameraRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetClassificationsFromCameraAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetClassificationsFromCamera will return a list of classifications in the next image given a camera and a classifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Service.Vision.V1.GetClassificationsFromCameraResponse> GetClassificationsFromCameraAsync(global::Viam.Service.Vision.V1.GetClassificationsFromCameraRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetClassificationsFromCamera, null, options, request);
      }
      /// <summary>
      /// GetClassifications will return a list of classifications in the next image given the image bytes and a classifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Service.Vision.V1.GetClassificationsResponse GetClassifications(global::Viam.Service.Vision.V1.GetClassificationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetClassifications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetClassifications will return a list of classifications in the next image given the image bytes and a classifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Service.Vision.V1.GetClassificationsResponse GetClassifications(global::Viam.Service.Vision.V1.GetClassificationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetClassifications, null, options, request);
      }
      /// <summary>
      /// GetClassifications will return a list of classifications in the next image given the image bytes and a classifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Service.Vision.V1.GetClassificationsResponse> GetClassificationsAsync(global::Viam.Service.Vision.V1.GetClassificationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetClassificationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetClassifications will return a list of classifications in the next image given the image bytes and a classifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Service.Vision.V1.GetClassificationsResponse> GetClassificationsAsync(global::Viam.Service.Vision.V1.GetClassificationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetClassifications, null, options, request);
      }
      /// <summary>
      /// GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
      /// as well as the 3-vector center of each of the found objects.
      /// A specific MIME type can be requested but may not necessarily be the same one returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Service.Vision.V1.GetObjectPointCloudsResponse GetObjectPointClouds(global::Viam.Service.Vision.V1.GetObjectPointCloudsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObjectPointClouds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
      /// as well as the 3-vector center of each of the found objects.
      /// A specific MIME type can be requested but may not necessarily be the same one returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Service.Vision.V1.GetObjectPointCloudsResponse GetObjectPointClouds(global::Viam.Service.Vision.V1.GetObjectPointCloudsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetObjectPointClouds, null, options, request);
      }
      /// <summary>
      /// GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
      /// as well as the 3-vector center of each of the found objects.
      /// A specific MIME type can be requested but may not necessarily be the same one returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Service.Vision.V1.GetObjectPointCloudsResponse> GetObjectPointCloudsAsync(global::Viam.Service.Vision.V1.GetObjectPointCloudsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObjectPointCloudsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
      /// as well as the 3-vector center of each of the found objects.
      /// A specific MIME type can be requested but may not necessarily be the same one returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Service.Vision.V1.GetObjectPointCloudsResponse> GetObjectPointCloudsAsync(global::Viam.Service.Vision.V1.GetObjectPointCloudsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetObjectPointClouds, null, options, request);
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.DoCommandResponse DoCommand(global::Viam.Common.V1.DoCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DoCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Common.V1.DoCommandResponse DoCommand(global::Viam.Common.V1.DoCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DoCommand, null, options, request);
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.DoCommandResponse> DoCommandAsync(global::Viam.Common.V1.DoCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DoCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DoCommand sends/receives arbitrary commands
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Common.V1.DoCommandResponse> DoCommandAsync(global::Viam.Common.V1.DoCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DoCommand, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override VisionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VisionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(VisionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetDetectionsFromCamera, serviceImpl.GetDetectionsFromCamera)
          .AddMethod(__Method_GetDetections, serviceImpl.GetDetections)
          .AddMethod(__Method_GetClassificationsFromCamera, serviceImpl.GetClassificationsFromCamera)
          .AddMethod(__Method_GetClassifications, serviceImpl.GetClassifications)
          .AddMethod(__Method_GetObjectPointClouds, serviceImpl.GetObjectPointClouds)
          .AddMethod(__Method_DoCommand, serviceImpl.DoCommand).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, VisionServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetDetectionsFromCamera, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Service.Vision.V1.GetDetectionsFromCameraRequest, global::Viam.Service.Vision.V1.GetDetectionsFromCameraResponse>(serviceImpl.GetDetectionsFromCamera));
      serviceBinder.AddMethod(__Method_GetDetections, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Service.Vision.V1.GetDetectionsRequest, global::Viam.Service.Vision.V1.GetDetectionsResponse>(serviceImpl.GetDetections));
      serviceBinder.AddMethod(__Method_GetClassificationsFromCamera, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Service.Vision.V1.GetClassificationsFromCameraRequest, global::Viam.Service.Vision.V1.GetClassificationsFromCameraResponse>(serviceImpl.GetClassificationsFromCamera));
      serviceBinder.AddMethod(__Method_GetClassifications, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Service.Vision.V1.GetClassificationsRequest, global::Viam.Service.Vision.V1.GetClassificationsResponse>(serviceImpl.GetClassifications));
      serviceBinder.AddMethod(__Method_GetObjectPointClouds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Service.Vision.V1.GetObjectPointCloudsRequest, global::Viam.Service.Vision.V1.GetObjectPointCloudsResponse>(serviceImpl.GetObjectPointClouds));
      serviceBinder.AddMethod(__Method_DoCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Common.V1.DoCommandRequest, global::Viam.Common.V1.DoCommandResponse>(serviceImpl.DoCommand));
    }

  }
}
#endregion
