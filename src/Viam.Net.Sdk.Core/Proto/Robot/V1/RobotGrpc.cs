// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: robot/v1/robot.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Viam.Robot.V1 {
  /// <summary>
  /// A RobotService encompasses all functionality of some robot comprised of parts, local and remote.
  /// </summary>
  public static partial class RobotService
  {
    static readonly string __ServiceName = "viam.robot.v1.RobotService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.GetOperationsRequest> __Marshaller_viam_robot_v1_GetOperationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.GetOperationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.GetOperationsResponse> __Marshaller_viam_robot_v1_GetOperationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.GetOperationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.GetSessionsRequest> __Marshaller_viam_robot_v1_GetSessionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.GetSessionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.GetSessionsResponse> __Marshaller_viam_robot_v1_GetSessionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.GetSessionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.ResourceNamesRequest> __Marshaller_viam_robot_v1_ResourceNamesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.ResourceNamesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.ResourceNamesResponse> __Marshaller_viam_robot_v1_ResourceNamesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.ResourceNamesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.ResourceRPCSubtypesRequest> __Marshaller_viam_robot_v1_ResourceRPCSubtypesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.ResourceRPCSubtypesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.ResourceRPCSubtypesResponse> __Marshaller_viam_robot_v1_ResourceRPCSubtypesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.ResourceRPCSubtypesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.CancelOperationRequest> __Marshaller_viam_robot_v1_CancelOperationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.CancelOperationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.CancelOperationResponse> __Marshaller_viam_robot_v1_CancelOperationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.CancelOperationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.BlockForOperationRequest> __Marshaller_viam_robot_v1_BlockForOperationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.BlockForOperationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.BlockForOperationResponse> __Marshaller_viam_robot_v1_BlockForOperationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.BlockForOperationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.DiscoverComponentsRequest> __Marshaller_viam_robot_v1_DiscoverComponentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.DiscoverComponentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.DiscoverComponentsResponse> __Marshaller_viam_robot_v1_DiscoverComponentsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.DiscoverComponentsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.FrameSystemConfigRequest> __Marshaller_viam_robot_v1_FrameSystemConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.FrameSystemConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.FrameSystemConfigResponse> __Marshaller_viam_robot_v1_FrameSystemConfigResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.FrameSystemConfigResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.TransformPoseRequest> __Marshaller_viam_robot_v1_TransformPoseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.TransformPoseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.TransformPoseResponse> __Marshaller_viam_robot_v1_TransformPoseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.TransformPoseResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.TransformPCDRequest> __Marshaller_viam_robot_v1_TransformPCDRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.TransformPCDRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.TransformPCDResponse> __Marshaller_viam_robot_v1_TransformPCDResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.TransformPCDResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.GetStatusRequest> __Marshaller_viam_robot_v1_GetStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.GetStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.GetStatusResponse> __Marshaller_viam_robot_v1_GetStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.GetStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.StreamStatusRequest> __Marshaller_viam_robot_v1_StreamStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.StreamStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.StreamStatusResponse> __Marshaller_viam_robot_v1_StreamStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.StreamStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.StopAllRequest> __Marshaller_viam_robot_v1_StopAllRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.StopAllRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.StopAllResponse> __Marshaller_viam_robot_v1_StopAllResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.StopAllResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.StartSessionRequest> __Marshaller_viam_robot_v1_StartSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.StartSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.StartSessionResponse> __Marshaller_viam_robot_v1_StartSessionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.StartSessionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.SendSessionHeartbeatRequest> __Marshaller_viam_robot_v1_SendSessionHeartbeatRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.SendSessionHeartbeatRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.SendSessionHeartbeatResponse> __Marshaller_viam_robot_v1_SendSessionHeartbeatResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.SendSessionHeartbeatResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.LogRequest> __Marshaller_viam_robot_v1_LogRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.LogRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.LogResponse> __Marshaller_viam_robot_v1_LogResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.LogResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.GetCloudMetadataRequest> __Marshaller_viam_robot_v1_GetCloudMetadataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.GetCloudMetadataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Viam.Robot.V1.GetCloudMetadataResponse> __Marshaller_viam_robot_v1_GetCloudMetadataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Viam.Robot.V1.GetCloudMetadataResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.GetOperationsRequest, global::Viam.Robot.V1.GetOperationsResponse> __Method_GetOperations = new grpc::Method<global::Viam.Robot.V1.GetOperationsRequest, global::Viam.Robot.V1.GetOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOperations",
        __Marshaller_viam_robot_v1_GetOperationsRequest,
        __Marshaller_viam_robot_v1_GetOperationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.GetSessionsRequest, global::Viam.Robot.V1.GetSessionsResponse> __Method_GetSessions = new grpc::Method<global::Viam.Robot.V1.GetSessionsRequest, global::Viam.Robot.V1.GetSessionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSessions",
        __Marshaller_viam_robot_v1_GetSessionsRequest,
        __Marshaller_viam_robot_v1_GetSessionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.ResourceNamesRequest, global::Viam.Robot.V1.ResourceNamesResponse> __Method_ResourceNames = new grpc::Method<global::Viam.Robot.V1.ResourceNamesRequest, global::Viam.Robot.V1.ResourceNamesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResourceNames",
        __Marshaller_viam_robot_v1_ResourceNamesRequest,
        __Marshaller_viam_robot_v1_ResourceNamesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.ResourceRPCSubtypesRequest, global::Viam.Robot.V1.ResourceRPCSubtypesResponse> __Method_ResourceRPCSubtypes = new grpc::Method<global::Viam.Robot.V1.ResourceRPCSubtypesRequest, global::Viam.Robot.V1.ResourceRPCSubtypesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResourceRPCSubtypes",
        __Marshaller_viam_robot_v1_ResourceRPCSubtypesRequest,
        __Marshaller_viam_robot_v1_ResourceRPCSubtypesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.CancelOperationRequest, global::Viam.Robot.V1.CancelOperationResponse> __Method_CancelOperation = new grpc::Method<global::Viam.Robot.V1.CancelOperationRequest, global::Viam.Robot.V1.CancelOperationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelOperation",
        __Marshaller_viam_robot_v1_CancelOperationRequest,
        __Marshaller_viam_robot_v1_CancelOperationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.BlockForOperationRequest, global::Viam.Robot.V1.BlockForOperationResponse> __Method_BlockForOperation = new grpc::Method<global::Viam.Robot.V1.BlockForOperationRequest, global::Viam.Robot.V1.BlockForOperationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BlockForOperation",
        __Marshaller_viam_robot_v1_BlockForOperationRequest,
        __Marshaller_viam_robot_v1_BlockForOperationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.DiscoverComponentsRequest, global::Viam.Robot.V1.DiscoverComponentsResponse> __Method_DiscoverComponents = new grpc::Method<global::Viam.Robot.V1.DiscoverComponentsRequest, global::Viam.Robot.V1.DiscoverComponentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DiscoverComponents",
        __Marshaller_viam_robot_v1_DiscoverComponentsRequest,
        __Marshaller_viam_robot_v1_DiscoverComponentsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.FrameSystemConfigRequest, global::Viam.Robot.V1.FrameSystemConfigResponse> __Method_FrameSystemConfig = new grpc::Method<global::Viam.Robot.V1.FrameSystemConfigRequest, global::Viam.Robot.V1.FrameSystemConfigResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FrameSystemConfig",
        __Marshaller_viam_robot_v1_FrameSystemConfigRequest,
        __Marshaller_viam_robot_v1_FrameSystemConfigResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.TransformPoseRequest, global::Viam.Robot.V1.TransformPoseResponse> __Method_TransformPose = new grpc::Method<global::Viam.Robot.V1.TransformPoseRequest, global::Viam.Robot.V1.TransformPoseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransformPose",
        __Marshaller_viam_robot_v1_TransformPoseRequest,
        __Marshaller_viam_robot_v1_TransformPoseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.TransformPCDRequest, global::Viam.Robot.V1.TransformPCDResponse> __Method_TransformPCD = new grpc::Method<global::Viam.Robot.V1.TransformPCDRequest, global::Viam.Robot.V1.TransformPCDResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransformPCD",
        __Marshaller_viam_robot_v1_TransformPCDRequest,
        __Marshaller_viam_robot_v1_TransformPCDResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.GetStatusRequest, global::Viam.Robot.V1.GetStatusResponse> __Method_GetStatus = new grpc::Method<global::Viam.Robot.V1.GetStatusRequest, global::Viam.Robot.V1.GetStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatus",
        __Marshaller_viam_robot_v1_GetStatusRequest,
        __Marshaller_viam_robot_v1_GetStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.StreamStatusRequest, global::Viam.Robot.V1.StreamStatusResponse> __Method_StreamStatus = new grpc::Method<global::Viam.Robot.V1.StreamStatusRequest, global::Viam.Robot.V1.StreamStatusResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamStatus",
        __Marshaller_viam_robot_v1_StreamStatusRequest,
        __Marshaller_viam_robot_v1_StreamStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.StopAllRequest, global::Viam.Robot.V1.StopAllResponse> __Method_StopAll = new grpc::Method<global::Viam.Robot.V1.StopAllRequest, global::Viam.Robot.V1.StopAllResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopAll",
        __Marshaller_viam_robot_v1_StopAllRequest,
        __Marshaller_viam_robot_v1_StopAllResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.StartSessionRequest, global::Viam.Robot.V1.StartSessionResponse> __Method_StartSession = new grpc::Method<global::Viam.Robot.V1.StartSessionRequest, global::Viam.Robot.V1.StartSessionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartSession",
        __Marshaller_viam_robot_v1_StartSessionRequest,
        __Marshaller_viam_robot_v1_StartSessionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.SendSessionHeartbeatRequest, global::Viam.Robot.V1.SendSessionHeartbeatResponse> __Method_SendSessionHeartbeat = new grpc::Method<global::Viam.Robot.V1.SendSessionHeartbeatRequest, global::Viam.Robot.V1.SendSessionHeartbeatResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendSessionHeartbeat",
        __Marshaller_viam_robot_v1_SendSessionHeartbeatRequest,
        __Marshaller_viam_robot_v1_SendSessionHeartbeatResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.LogRequest, global::Viam.Robot.V1.LogResponse> __Method_Log = new grpc::Method<global::Viam.Robot.V1.LogRequest, global::Viam.Robot.V1.LogResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Log",
        __Marshaller_viam_robot_v1_LogRequest,
        __Marshaller_viam_robot_v1_LogResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Viam.Robot.V1.GetCloudMetadataRequest, global::Viam.Robot.V1.GetCloudMetadataResponse> __Method_GetCloudMetadata = new grpc::Method<global::Viam.Robot.V1.GetCloudMetadataRequest, global::Viam.Robot.V1.GetCloudMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCloudMetadata",
        __Marshaller_viam_robot_v1_GetCloudMetadataRequest,
        __Marshaller_viam_robot_v1_GetCloudMetadataResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Viam.Robot.V1.RobotReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RobotService</summary>
    [grpc::BindServiceMethod(typeof(RobotService), "BindService")]
    public abstract partial class RobotServiceBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.GetOperationsResponse> GetOperations(global::Viam.Robot.V1.GetOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.GetSessionsResponse> GetSessions(global::Viam.Robot.V1.GetSessionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ResourceNames returns the list of all resources.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.ResourceNamesResponse> ResourceNames(global::Viam.Robot.V1.ResourceNamesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ResourceRPCSubtypes returns the list of all resource types.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.ResourceRPCSubtypesResponse> ResourceRPCSubtypes(global::Viam.Robot.V1.ResourceRPCSubtypesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.CancelOperationResponse> CancelOperation(global::Viam.Robot.V1.CancelOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.BlockForOperationResponse> BlockForOperation(global::Viam.Robot.V1.BlockForOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DiscoverComponents returns the list of discovered component configurations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.DiscoverComponentsResponse> DiscoverComponents(global::Viam.Robot.V1.DiscoverComponentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.FrameSystemConfigResponse> FrameSystemConfig(global::Viam.Robot.V1.FrameSystemConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.TransformPoseResponse> TransformPose(global::Viam.Robot.V1.TransformPoseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.TransformPCDResponse> TransformPCD(global::Viam.Robot.V1.TransformPCDRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetStatus returns the list of all statuses requested. An empty request signifies all resources.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.GetStatusResponse> GetStatus(global::Viam.Robot.V1.GetStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StreamStatus periodically sends the status of all statuses requested. An empty request signifies all resources.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamStatus(global::Viam.Robot.V1.StreamStatusRequest request, grpc::IServerStreamWriter<global::Viam.Robot.V1.StreamStatusResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StopAll will stop all current and outstanding operations for the robot and stops all actuators and movement
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.StopAllResponse> StopAll(global::Viam.Robot.V1.StopAllRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StartSession creates a new session that expects at least one heartbeat within the returned window.
      /// If the window lapses, any resources that have safety heart monitored methods, where this session was
      /// the last caller on the resource, will be stopped.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.StartSessionResponse> StartSession(global::Viam.Robot.V1.StartSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SendSessionHeartbeat sends a heartbeat to the given session. If the session has expired, a
      /// SESSION_EXPIRED error will be returned.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.SendSessionHeartbeatResponse> SendSessionHeartbeat(global::Viam.Robot.V1.SendSessionHeartbeatRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Log sends logs to be logged by this robot. Currently used for module logging.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.LogResponse> Log(global::Viam.Robot.V1.LogRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetCloudMetadata returns app-related information about the robot.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Viam.Robot.V1.GetCloudMetadataResponse> GetCloudMetadata(global::Viam.Robot.V1.GetCloudMetadataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RobotService</summary>
    public partial class RobotServiceClient : grpc::ClientBase<RobotServiceClient>
    {
      /// <summary>Creates a new client for RobotService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public RobotServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RobotService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public RobotServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected RobotServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected RobotServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.GetOperationsResponse GetOperations(global::Viam.Robot.V1.GetOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.GetOperationsResponse GetOperations(global::Viam.Robot.V1.GetOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOperations, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.GetOperationsResponse> GetOperationsAsync(global::Viam.Robot.V1.GetOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.GetOperationsResponse> GetOperationsAsync(global::Viam.Robot.V1.GetOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOperations, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.GetSessionsResponse GetSessions(global::Viam.Robot.V1.GetSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSessions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.GetSessionsResponse GetSessions(global::Viam.Robot.V1.GetSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSessions, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.GetSessionsResponse> GetSessionsAsync(global::Viam.Robot.V1.GetSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSessionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.GetSessionsResponse> GetSessionsAsync(global::Viam.Robot.V1.GetSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSessions, null, options, request);
      }
      /// <summary>
      /// ResourceNames returns the list of all resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.ResourceNamesResponse ResourceNames(global::Viam.Robot.V1.ResourceNamesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResourceNames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ResourceNames returns the list of all resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.ResourceNamesResponse ResourceNames(global::Viam.Robot.V1.ResourceNamesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResourceNames, null, options, request);
      }
      /// <summary>
      /// ResourceNames returns the list of all resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.ResourceNamesResponse> ResourceNamesAsync(global::Viam.Robot.V1.ResourceNamesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResourceNamesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ResourceNames returns the list of all resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.ResourceNamesResponse> ResourceNamesAsync(global::Viam.Robot.V1.ResourceNamesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResourceNames, null, options, request);
      }
      /// <summary>
      /// ResourceRPCSubtypes returns the list of all resource types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.ResourceRPCSubtypesResponse ResourceRPCSubtypes(global::Viam.Robot.V1.ResourceRPCSubtypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResourceRPCSubtypes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ResourceRPCSubtypes returns the list of all resource types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.ResourceRPCSubtypesResponse ResourceRPCSubtypes(global::Viam.Robot.V1.ResourceRPCSubtypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResourceRPCSubtypes, null, options, request);
      }
      /// <summary>
      /// ResourceRPCSubtypes returns the list of all resource types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.ResourceRPCSubtypesResponse> ResourceRPCSubtypesAsync(global::Viam.Robot.V1.ResourceRPCSubtypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResourceRPCSubtypesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ResourceRPCSubtypes returns the list of all resource types.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.ResourceRPCSubtypesResponse> ResourceRPCSubtypesAsync(global::Viam.Robot.V1.ResourceRPCSubtypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResourceRPCSubtypes, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.CancelOperationResponse CancelOperation(global::Viam.Robot.V1.CancelOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelOperation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.CancelOperationResponse CancelOperation(global::Viam.Robot.V1.CancelOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelOperation, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.CancelOperationResponse> CancelOperationAsync(global::Viam.Robot.V1.CancelOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelOperationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.CancelOperationResponse> CancelOperationAsync(global::Viam.Robot.V1.CancelOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelOperation, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.BlockForOperationResponse BlockForOperation(global::Viam.Robot.V1.BlockForOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BlockForOperation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.BlockForOperationResponse BlockForOperation(global::Viam.Robot.V1.BlockForOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BlockForOperation, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.BlockForOperationResponse> BlockForOperationAsync(global::Viam.Robot.V1.BlockForOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BlockForOperationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.BlockForOperationResponse> BlockForOperationAsync(global::Viam.Robot.V1.BlockForOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BlockForOperation, null, options, request);
      }
      /// <summary>
      /// DiscoverComponents returns the list of discovered component configurations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.DiscoverComponentsResponse DiscoverComponents(global::Viam.Robot.V1.DiscoverComponentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DiscoverComponents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DiscoverComponents returns the list of discovered component configurations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.DiscoverComponentsResponse DiscoverComponents(global::Viam.Robot.V1.DiscoverComponentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DiscoverComponents, null, options, request);
      }
      /// <summary>
      /// DiscoverComponents returns the list of discovered component configurations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.DiscoverComponentsResponse> DiscoverComponentsAsync(global::Viam.Robot.V1.DiscoverComponentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DiscoverComponentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DiscoverComponents returns the list of discovered component configurations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.DiscoverComponentsResponse> DiscoverComponentsAsync(global::Viam.Robot.V1.DiscoverComponentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DiscoverComponents, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.FrameSystemConfigResponse FrameSystemConfig(global::Viam.Robot.V1.FrameSystemConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FrameSystemConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.FrameSystemConfigResponse FrameSystemConfig(global::Viam.Robot.V1.FrameSystemConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FrameSystemConfig, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.FrameSystemConfigResponse> FrameSystemConfigAsync(global::Viam.Robot.V1.FrameSystemConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FrameSystemConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.FrameSystemConfigResponse> FrameSystemConfigAsync(global::Viam.Robot.V1.FrameSystemConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FrameSystemConfig, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.TransformPoseResponse TransformPose(global::Viam.Robot.V1.TransformPoseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransformPose(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.TransformPoseResponse TransformPose(global::Viam.Robot.V1.TransformPoseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransformPose, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.TransformPoseResponse> TransformPoseAsync(global::Viam.Robot.V1.TransformPoseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransformPoseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.TransformPoseResponse> TransformPoseAsync(global::Viam.Robot.V1.TransformPoseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransformPose, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.TransformPCDResponse TransformPCD(global::Viam.Robot.V1.TransformPCDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransformPCD(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.TransformPCDResponse TransformPCD(global::Viam.Robot.V1.TransformPCDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransformPCD, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.TransformPCDResponse> TransformPCDAsync(global::Viam.Robot.V1.TransformPCDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransformPCDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.TransformPCDResponse> TransformPCDAsync(global::Viam.Robot.V1.TransformPCDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransformPCD, null, options, request);
      }
      /// <summary>
      /// GetStatus returns the list of all statuses requested. An empty request signifies all resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.GetStatusResponse GetStatus(global::Viam.Robot.V1.GetStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetStatus returns the list of all statuses requested. An empty request signifies all resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.GetStatusResponse GetStatus(global::Viam.Robot.V1.GetStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatus, null, options, request);
      }
      /// <summary>
      /// GetStatus returns the list of all statuses requested. An empty request signifies all resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.GetStatusResponse> GetStatusAsync(global::Viam.Robot.V1.GetStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetStatus returns the list of all statuses requested. An empty request signifies all resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.GetStatusResponse> GetStatusAsync(global::Viam.Robot.V1.GetStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatus, null, options, request);
      }
      /// <summary>
      /// StreamStatus periodically sends the status of all statuses requested. An empty request signifies all resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Viam.Robot.V1.StreamStatusResponse> StreamStatus(global::Viam.Robot.V1.StreamStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamStatus periodically sends the status of all statuses requested. An empty request signifies all resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Viam.Robot.V1.StreamStatusResponse> StreamStatus(global::Viam.Robot.V1.StreamStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamStatus, null, options, request);
      }
      /// <summary>
      /// StopAll will stop all current and outstanding operations for the robot and stops all actuators and movement
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.StopAllResponse StopAll(global::Viam.Robot.V1.StopAllRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopAll(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StopAll will stop all current and outstanding operations for the robot and stops all actuators and movement
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.StopAllResponse StopAll(global::Viam.Robot.V1.StopAllRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopAll, null, options, request);
      }
      /// <summary>
      /// StopAll will stop all current and outstanding operations for the robot and stops all actuators and movement
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.StopAllResponse> StopAllAsync(global::Viam.Robot.V1.StopAllRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopAllAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StopAll will stop all current and outstanding operations for the robot and stops all actuators and movement
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.StopAllResponse> StopAllAsync(global::Viam.Robot.V1.StopAllRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopAll, null, options, request);
      }
      /// <summary>
      /// StartSession creates a new session that expects at least one heartbeat within the returned window.
      /// If the window lapses, any resources that have safety heart monitored methods, where this session was
      /// the last caller on the resource, will be stopped.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.StartSessionResponse StartSession(global::Viam.Robot.V1.StartSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StartSession creates a new session that expects at least one heartbeat within the returned window.
      /// If the window lapses, any resources that have safety heart monitored methods, where this session was
      /// the last caller on the resource, will be stopped.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.StartSessionResponse StartSession(global::Viam.Robot.V1.StartSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartSession, null, options, request);
      }
      /// <summary>
      /// StartSession creates a new session that expects at least one heartbeat within the returned window.
      /// If the window lapses, any resources that have safety heart monitored methods, where this session was
      /// the last caller on the resource, will be stopped.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.StartSessionResponse> StartSessionAsync(global::Viam.Robot.V1.StartSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StartSession creates a new session that expects at least one heartbeat within the returned window.
      /// If the window lapses, any resources that have safety heart monitored methods, where this session was
      /// the last caller on the resource, will be stopped.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.StartSessionResponse> StartSessionAsync(global::Viam.Robot.V1.StartSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartSession, null, options, request);
      }
      /// <summary>
      /// SendSessionHeartbeat sends a heartbeat to the given session. If the session has expired, a
      /// SESSION_EXPIRED error will be returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.SendSessionHeartbeatResponse SendSessionHeartbeat(global::Viam.Robot.V1.SendSessionHeartbeatRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendSessionHeartbeat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SendSessionHeartbeat sends a heartbeat to the given session. If the session has expired, a
      /// SESSION_EXPIRED error will be returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.SendSessionHeartbeatResponse SendSessionHeartbeat(global::Viam.Robot.V1.SendSessionHeartbeatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendSessionHeartbeat, null, options, request);
      }
      /// <summary>
      /// SendSessionHeartbeat sends a heartbeat to the given session. If the session has expired, a
      /// SESSION_EXPIRED error will be returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.SendSessionHeartbeatResponse> SendSessionHeartbeatAsync(global::Viam.Robot.V1.SendSessionHeartbeatRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendSessionHeartbeatAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SendSessionHeartbeat sends a heartbeat to the given session. If the session has expired, a
      /// SESSION_EXPIRED error will be returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.SendSessionHeartbeatResponse> SendSessionHeartbeatAsync(global::Viam.Robot.V1.SendSessionHeartbeatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendSessionHeartbeat, null, options, request);
      }
      /// <summary>
      /// Log sends logs to be logged by this robot. Currently used for module logging.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.LogResponse Log(global::Viam.Robot.V1.LogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Log(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Log sends logs to be logged by this robot. Currently used for module logging.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.LogResponse Log(global::Viam.Robot.V1.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Log, null, options, request);
      }
      /// <summary>
      /// Log sends logs to be logged by this robot. Currently used for module logging.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.LogResponse> LogAsync(global::Viam.Robot.V1.LogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Log sends logs to be logged by this robot. Currently used for module logging.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.LogResponse> LogAsync(global::Viam.Robot.V1.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Log, null, options, request);
      }
      /// <summary>
      /// GetCloudMetadata returns app-related information about the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.GetCloudMetadataResponse GetCloudMetadata(global::Viam.Robot.V1.GetCloudMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCloudMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetCloudMetadata returns app-related information about the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Viam.Robot.V1.GetCloudMetadataResponse GetCloudMetadata(global::Viam.Robot.V1.GetCloudMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCloudMetadata, null, options, request);
      }
      /// <summary>
      /// GetCloudMetadata returns app-related information about the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.GetCloudMetadataResponse> GetCloudMetadataAsync(global::Viam.Robot.V1.GetCloudMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCloudMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetCloudMetadata returns app-related information about the robot.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Viam.Robot.V1.GetCloudMetadataResponse> GetCloudMetadataAsync(global::Viam.Robot.V1.GetCloudMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCloudMetadata, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override RobotServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RobotServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(RobotServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetOperations, serviceImpl.GetOperations)
          .AddMethod(__Method_GetSessions, serviceImpl.GetSessions)
          .AddMethod(__Method_ResourceNames, serviceImpl.ResourceNames)
          .AddMethod(__Method_ResourceRPCSubtypes, serviceImpl.ResourceRPCSubtypes)
          .AddMethod(__Method_CancelOperation, serviceImpl.CancelOperation)
          .AddMethod(__Method_BlockForOperation, serviceImpl.BlockForOperation)
          .AddMethod(__Method_DiscoverComponents, serviceImpl.DiscoverComponents)
          .AddMethod(__Method_FrameSystemConfig, serviceImpl.FrameSystemConfig)
          .AddMethod(__Method_TransformPose, serviceImpl.TransformPose)
          .AddMethod(__Method_TransformPCD, serviceImpl.TransformPCD)
          .AddMethod(__Method_GetStatus, serviceImpl.GetStatus)
          .AddMethod(__Method_StreamStatus, serviceImpl.StreamStatus)
          .AddMethod(__Method_StopAll, serviceImpl.StopAll)
          .AddMethod(__Method_StartSession, serviceImpl.StartSession)
          .AddMethod(__Method_SendSessionHeartbeat, serviceImpl.SendSessionHeartbeat)
          .AddMethod(__Method_Log, serviceImpl.Log)
          .AddMethod(__Method_GetCloudMetadata, serviceImpl.GetCloudMetadata).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RobotServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetOperations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.GetOperationsRequest, global::Viam.Robot.V1.GetOperationsResponse>(serviceImpl.GetOperations));
      serviceBinder.AddMethod(__Method_GetSessions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.GetSessionsRequest, global::Viam.Robot.V1.GetSessionsResponse>(serviceImpl.GetSessions));
      serviceBinder.AddMethod(__Method_ResourceNames, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.ResourceNamesRequest, global::Viam.Robot.V1.ResourceNamesResponse>(serviceImpl.ResourceNames));
      serviceBinder.AddMethod(__Method_ResourceRPCSubtypes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.ResourceRPCSubtypesRequest, global::Viam.Robot.V1.ResourceRPCSubtypesResponse>(serviceImpl.ResourceRPCSubtypes));
      serviceBinder.AddMethod(__Method_CancelOperation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.CancelOperationRequest, global::Viam.Robot.V1.CancelOperationResponse>(serviceImpl.CancelOperation));
      serviceBinder.AddMethod(__Method_BlockForOperation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.BlockForOperationRequest, global::Viam.Robot.V1.BlockForOperationResponse>(serviceImpl.BlockForOperation));
      serviceBinder.AddMethod(__Method_DiscoverComponents, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.DiscoverComponentsRequest, global::Viam.Robot.V1.DiscoverComponentsResponse>(serviceImpl.DiscoverComponents));
      serviceBinder.AddMethod(__Method_FrameSystemConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.FrameSystemConfigRequest, global::Viam.Robot.V1.FrameSystemConfigResponse>(serviceImpl.FrameSystemConfig));
      serviceBinder.AddMethod(__Method_TransformPose, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.TransformPoseRequest, global::Viam.Robot.V1.TransformPoseResponse>(serviceImpl.TransformPose));
      serviceBinder.AddMethod(__Method_TransformPCD, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.TransformPCDRequest, global::Viam.Robot.V1.TransformPCDResponse>(serviceImpl.TransformPCD));
      serviceBinder.AddMethod(__Method_GetStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.GetStatusRequest, global::Viam.Robot.V1.GetStatusResponse>(serviceImpl.GetStatus));
      serviceBinder.AddMethod(__Method_StreamStatus, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Viam.Robot.V1.StreamStatusRequest, global::Viam.Robot.V1.StreamStatusResponse>(serviceImpl.StreamStatus));
      serviceBinder.AddMethod(__Method_StopAll, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.StopAllRequest, global::Viam.Robot.V1.StopAllResponse>(serviceImpl.StopAll));
      serviceBinder.AddMethod(__Method_StartSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.StartSessionRequest, global::Viam.Robot.V1.StartSessionResponse>(serviceImpl.StartSession));
      serviceBinder.AddMethod(__Method_SendSessionHeartbeat, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.SendSessionHeartbeatRequest, global::Viam.Robot.V1.SendSessionHeartbeatResponse>(serviceImpl.SendSessionHeartbeat));
      serviceBinder.AddMethod(__Method_Log, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.LogRequest, global::Viam.Robot.V1.LogResponse>(serviceImpl.Log));
      serviceBinder.AddMethod(__Method_GetCloudMetadata, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Viam.Robot.V1.GetCloudMetadataRequest, global::Viam.Robot.V1.GetCloudMetadataResponse>(serviceImpl.GetCloudMetadata));
    }

  }
}
#endregion
